from crewai import Agent, Task, Crew
from embeddings import EmbeddingHandler
from vector_store import VectorStore
from llm_config import get_llm
from keywords import KEYWORDS
import re

class ChatBotAgent:
    def __init__(self):
        self.embedding_handler = EmbeddingHandler()
        self.vector_store = VectorStore()
        self.llm = get_llm()
        self.keywords = KEYWORDS

        # Kh·ªüi t·∫°o ƒë·ªô ∆∞u ti√™n cho c√°c ch·ªß ƒë·ªÅ
        self.priority_weights = {
            "khoa": 5,
            "ng√†nh h·ªçc": 5,
            "h·ªçc ph√≠": 5,
            "x·∫øp lo·∫°i h·ªçc l·ª±c": 2,
            "x·∫øp h·∫°ng h·ªçc l·ª±c": 2,
            "ƒëƒÉng nh·∫≠p": 1,
            "ƒë·ªïi m·∫≠t kh·∫©u": 1,
            "ƒëƒÉng k√Ω h·ªçc": 1,
            "thanh to√°n h·ªçc ph√≠": 1,
            "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a": 1,
            "xem l·ªãch thi": 1,
            "tra c·ª©u ƒëi·ªÉm": 1,
            "h·ªßy h·ªçc ph·∫ßn": 1,
            "g·ª≠i tin nh·∫Øn": 1,
            "t·ªïng s·ªë t√≠n ch·ªâ": 2,
        }
        # L∆∞u tr·ªØ ƒë·ªô ∆∞u ti√™n cao nh·∫•t t·ª´ c√°c c√¢u h·ªèi tr∆∞·ªõc
        self.max_priority = 0
        # ƒê·∫øm s·ªë l∆∞·ª£ng c√¢u h·ªèi ƒë·ªÉ reset max_priority n·∫øu c·∫ßn
        self.query_count = 0
        # Th√™m danh s√°ch ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ chat kh√¥ng gi·ªõi h·∫°n
        self.chat_history = []  # Danh s√°ch l∆∞u tr·ªØ c√°c c·∫∑p (query, response)

        # L∆∞u tr·ªØ b·∫£ng ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ƒë·∫°i tr√†
        self.training_program = {
            "II: Ngh·ªá thu·∫≠t": {
                "majors": ["Thi·∫øt k·∫ø ƒë·ªì h·ªça"],
                "Kh√≥a 17": 372000,
                "Kh√≥a 18-19": 369200,
                "Kh√≥a 20-21": 387000
            },
            "III: Kinh doanh v√† qu·∫£n l√Ω, ph√°p lu·∫≠t": {
                "majors": ["H·ªá th·ªëng th√¥ng tin qu·∫£n l√Ω", "Qu·∫£n tr·ªã vƒÉn ph√≤ng", "Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠", "Kinh t·∫ø s·ªë"],
                "Kh√≥a 17": 387500,
                "Kh√≥a 18-19": 384600,
                "Kh√≥a 20-21": 403200
            },
            "V: M√°y t√≠nh v√† c√¥ng ngh·ªá th√¥ng tin, C√¥ng ngh·ªá k·ªπ thu·∫≠t‚Ä¶": {
                "majors": [
                    "C√¥ng ngh·ªá th√¥ng tin", "Khoa h·ªçc m√°y t√≠nh", "Truy·ªÅn th√¥ng v√† m·∫°ng m√°y t√≠nh", "K·ªπ thu·∫≠t ph·∫ßn m·ªÅm",
                    "H·ªá th·ªëng th√¥ng tin", "An to√†n th√¥ng tin", "C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªán, ƒëi·ªán t·ª≠",
                    "C√¥ng ngh·ªá √¥ t√¥ v√† Giao th√¥ng th√¥ng minh", "C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªÅu khi·ªÉn v√† t·ª± ƒë·ªông h√≥a",
                    "C√¥ng ngh·ªá k·ªπ thu·∫≠t m√°y t√≠nh", "C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªán t·ª≠, vi·ªÖn th√¥ng", "K·ªπ thu·∫≠t y sinh",
                    "K·ªπ thu·∫≠t c∆° ƒëi·ªán t·ª≠ th√¥ng minh v√† robot"
                ],
                "Kh√≥a 17": 453000,
                "Kh√≥a 18-19": 450000,
                "Kh√≥a 20-21": 467700
            },
            "VII: B√°o ch√≠ v√† th√¥ng tin‚Ä¶": {
                "majors": ["Truy·ªÅn th√¥ng ƒëa ph∆∞∆°ng ti·ªán", "C√¥ng ngh·ªá truy·ªÅn th√¥ng"],
                "Kh√≥a 17": 372000,
                "Kh√≥a 18-19": 369200,
                "Kh√≥a 20-21": 387000
            }
        }
        # print("üîç self.training_program:", self.training_program)

        self.agent = Agent(
            role="ICTU Handbook Assistant",
            goal="Truy xu·∫•t v√† di·ªÖn gi·∫£i th√¥ng tin t·ª´ s·ªï tay ICTU ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa sinh vi√™n",
            backstory="T√¥i l√† tr·ª£ l√Ω ·∫£o h·ªó tr·ª£ sinh vi√™n ICTU, truy xu·∫•t th√¥ng tin t·ª´ s·ªï tay sinh vi√™n v√† cung c·∫•p c√¢u tr·∫£ l·ªùi ch√≠nh x√°c, ng·∫Øn g·ªçn.",
            verbose=True,
            llm=self.llm
        )
        
    def is_true_false_question(self, query):
        """Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ph·∫£i d·∫°ng ƒë√∫ng/sai kh√¥ng"""
        true_false_keywords = ["ƒë√∫ng kh√¥ng", "c√≥ ph·∫£i", "kh√¥ng ph·∫£i", "c√≥ ƒë√∫ng", "c√≥ th·∫≠t", "th·∫≠t kh√¥ng"]
        return any(keyword in query.lower() for keyword in true_false_keywords)

    def is_comparison_question(self, query):
        """Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ph·∫£i d·∫°ng so s√°nh kh√¥ng"""
        comparison_keywords = ["so s√°nh", "kh√°c nhau", "kh√°c bi·ªát", "gi·ªØa", "v√†", "cao h∆°n", "th·∫•p h∆°n", "h∆°n"]
        query_lower = query.lower()
        comparison_topics = [
            "h·ªçc ph√≠", "n·ªôi tr√∫", "ngo·∫°i tr√∫", "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", 
            "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a"
        ]
        return (
            any(keyword in query_lower for keyword in comparison_keywords) and
            any(topic in query_lower for topic in comparison_topics)
        )

    def compare_tuition_fees(self, query):
        query_lower = query.lower()
        majors = [m for block in self.training_program.values() for m in block["majors"]]
        
        # Debug: In c√¢u h·ªèi v√† danh s√°ch majors
        print(f"üîç Query Lower: {query_lower}")
        print(f"üîç Majors: {majors}")
        
        # T√¨m ng√†nh b·∫±ng regex, gi·ªØ th·ª© t·ª± xu·∫•t hi·ªán
        found_majors = []
        for major in majors:
            # T·∫°o pattern regex cho t√™n ng√†nh, tho√°t c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
            pattern = re.compile(re.escape(major.lower()), re.IGNORECASE)
            match = pattern.search(query_lower)
            if match and major not in found_majors:
                found_majors.append((major, match.start()))
        
        # S·∫Øp x·∫øp theo v·ªã tr√≠ xu·∫•t hi·ªán
        found_majors.sort(key=lambda x: x[1])
        found_majors = [major for major, _ in found_majors[:2]]
        
        # Debug: In c√°c ng√†nh t√¨m th·∫•y
        print(f"üîç Found Majors: {found_majors}")
        
        if len(found_majors) < 2:
            return "Kh√¥ng t√¨m th·∫•y ƒë·ªß hai ng√†nh ƒë·ªÉ so s√°nh h·ªçc ph√≠. Vui l√≤ng ki·ªÉm tra t√™n ng√†nh trong c√¢u h·ªèi."
        
        # X√°c ƒë·ªãnh kh√≥a
        course = "Kh√≥a 18-19"  # M·∫∑c ƒë·ªãnh
        if "kh√≥a 17" in query_lower:
            course = "Kh√≥a 17"
        elif "kh√≥a 20-21" in query_lower or "kh√≥a 20" in query_lower or "kh√≥a 21" in query_lower:
            course = "Kh√≥a 20-21"
        
        # Debug: In kh√≥a ƒë∆∞·ª£c ch·ªçn
        print(f"üîç Selected Course: {course}")
        
        # L·∫•y h·ªçc ph√≠
        fees = []
        for major in found_majors:
            found = False
            for block_name, block in self.training_program.items():
                if major in block["majors"]:
                    fee = block.get(course, block.get("Kh√≥a 18-19"))
                    if fee is not None:
                        fees.append((major, course, fee))
                        found = True
                        break
            if not found:
                return f"Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc ph√≠ cho ng√†nh {major} kh√≥a {course}."
        
        # Debug: In h·ªçc ph√≠ t√¨m th·∫•y
        print(f"üîç Fees: {fees}")
        
        if len(fees) < 2:
            return "Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc ph√≠ cho c√°c ng√†nh ho·∫∑c kh√≥a y√™u c·∫ßu."
        
        # So s√°nh h·ªçc ph√≠
        result = []
        fee1, fee2 = fees[0], fees[1]  # fee1: ng√†nh A, fee2: ng√†nh B
        result.append(f"Ng√†nh {fee1[0]} {fee1[1]}: {fee1[2]:,} ƒë·ªìng/t√≠n ch·ªâ")
        result.append(f"Ng√†nh {fee2[0]} {fee2[1]}: {fee2[2]:,} ƒë·ªìng/t√≠n ch·ªâ")
        
        diff = fee1[2] - fee2[2]
        if diff > 0:
            result.append(f"K·∫øt qu·∫£: H·ªçc ph√≠ ng√†nh {fee1[0]} {fee1[1]} l·ªõn h∆°n ng√†nh {fee2[0]} {fee2[1]} (ch√™nh l·ªách {abs(diff):,} ƒë·ªìng/t√≠n ch·ªâ).")
        elif diff < 0:
            result.append(f"K·∫øt qu·∫£: H·ªçc ph√≠ ng√†nh {fee1[0]} {fee1[1]} nh·ªè h∆°n ng√†nh {fee2[0]} {fee2[1]} (ch√™nh l·ªách {abs(diff):,} ƒë·ªìng/t√≠n ch·ªâ).")
        else:
            result.append(f"K·∫øt qu·∫£: H·ªçc ph√≠ ng√†nh {fee1[0]} {fee1[1]} b·∫±ng ng√†nh {fee2[0]} {fee2[1]}.")
        
        return "\n".join(result)
    
    def compare_resident_nonresident(self, query, search_results):
        """So s√°nh ƒëi·ªÉm kh√°c nhau gi·ªØa sinh vi√™n n·ªôi tr√∫ v√† ngo·∫°i tr√∫ d·ª±a tr√™n vector_store"""
        query_lower = query.lower()
        
        # T√¨m ki·∫øm th√¥ng tin t·ª´ vector_store
        resident_keywords = ["n·ªôi tr√∫", "k√Ω t√∫c x√°", "·ªü trong tr∆∞·ªùng"]
        nonresident_keywords = ["ngo·∫°i tr√∫", "thu√™ tr·ªç", "·ªü ngo√†i tr∆∞·ªùng"]
        resident_info = []
        nonresident_info = []
        
        for result in search_results:
            result_text = result["text"].lower()
            if any(keyword in result_text for keyword in resident_keywords):
                resident_info.append(result["text"])
            if any(keyword in result_text for keyword in nonresident_keywords):
                nonresident_info.append(result["text"])

        # T·∫°o c√¢u tr·∫£ l·ªùi
        result = ["**So s√°nh sinh vi√™n n·ªôi tr√∫ v√† ngo·∫°i tr√∫**:"]
        
        if resident_info or nonresident_info:
            if resident_info:
                result.append("Sinh vi√™n n·ªôi tr√∫:")
                result.extend([f"- {info}" for info in resident_info[:3]])  # TƒÉng gi·ªõi h·∫°n l√™n 3 ƒë·ªÉ c√≥ th√™m th√¥ng tin
            if nonresident_info:
                result.append("Sinh vi√™n ngo·∫°i tr√∫:")
                result.extend([f"- {info}" for info in nonresident_info[:3]])
        else:
            result.append("üôÅ Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ sinh vi√™n n·ªôi tr√∫ ho·∫∑c ngo·∫°i tr√∫ trong s·ªï tay ICTU.")

        return "\n".join(result)

    def compare_generic(self, query, search_results, topic):
        """So s√°nh chung cho c√°c ch·ªß ƒë·ªÅ kh√°c (ngo√†i h·ªçc ph√≠ v√† n·ªôi tr√∫/ngo·∫°i tr√∫)"""
        query_lower = query.lower()
        result = [f"**So s√°nh v·ªÅ {topic}**:"]
        
        # X√°c ƒë·ªãnh t·ª´ kh√≥a cho ch·ªß ƒë·ªÅ
        topic_keywords = {
            "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc": ["ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc", "y√™u c·∫ßu nh·∫≠p h·ªçc", "ƒëi·ªÉm chu·∫©n", "x√©t tuy·ªÉn"],
            "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o": ["ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "t√≠n ch·ªâ", "m√¥n h·ªçc", "k·ªπ s∆∞", "c·ª≠ nh√¢n"],
            "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a": ["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", "ƒëi·ªÉm ngo·∫°i kh√≥a", "s·ª± ki·ªán sinh vi√™n"],
            # Th√™m c√°c ch·ªß ƒë·ªÅ kh√°c n·∫øu c·∫ßn
        }.get(topic, [])

        # T√¨m ki·∫øm th√¥ng tin li√™n quan t·ª´ search_results
        topic_info = []
        for result in search_results:
            result_text = result["text"].lower()
            if any(keyword in result_text for keyword in topic_keywords):
                topic_info.append(result["text"])

        if topic_info:
            # T√°ch th√¥ng tin theo c√°c ƒë·ªëi t∆∞·ª£ng so s√°nh (n·∫øu c√≥)
            entities = []
            for major in [m for block in self.training_program.values() for m in block["majors"]]:
                if major.lower() in query_lower:
                    entities.append(major)
            if not entities:
                entities = [keyword for keyword in topic_keywords if keyword in query_lower]

            if len(entities) >= 2:
                # So s√°nh gi·ªØa hai ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ
                for entity in entities:
                    entity_info = [info for info in topic_info if entity.lower() in info.lower()]
                    if entity_info:
                        result.append(f"{entity}:")
                        result.extend([f"- {info}" for info in entity_info[:2]])
                    else:
                        result.append(f"{entity}: Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt.")
            else:
                # Li·ªát k√™ th√¥ng tin chung cho ch·ªß ƒë·ªÅ
                result.append(f"Th√¥ng tin v·ªÅ {topic}:")
                result.extend([f"- {info}" for info in topic_info[:3]])
        else:
            result.append(f"üôÅ Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ {topic} trong s·ªï tay ICTU.")

        return "\n".join(result)

    def extract_statement(self, query):
        """Tr√≠ch xu·∫•t tuy√™n b·ªë t·ª´ c√¢u h·ªèi ƒë√∫ng/sai"""
        for keyword in ["ƒë√∫ng kh√¥ng", "c√≥ ph·∫£i", "kh√¥ng ph·∫£i", "c√≥ ƒë√∫ng", "c√≥ th·∫≠t", "th·∫≠t kh√¥ng"]:
            if keyword in query.lower():
                statement = query.lower().replace(keyword, "").strip(" ?")
                return statement
        return query

    def get_relevant_info(self, query):
        """L·∫•y th√¥ng tin li√™n quan t·ª´ training_program"""
        relevant_info = {}
        query_lower = query.lower()

        # Ki·ªÉm tra c√°c t·ª´ kh√≥a trong c√¢u h·ªèi ƒë·ªÉ l·∫•y d·ªØ li·ªáu li√™n quan
        if "h·ªçc ph√≠" in query_lower:
            for block_name, block in self.training_program.items():
                for major in block["majors"]:
                    if major.lower() in query_lower:
                        relevant_info[major] = {
                            "Kh√≥a 17": block["Kh√≥a 17"],
                            "Kh√≥a 18-19": block["Kh√≥a 18-19"],
                            "Kh√≥a 20-21": block["Kh√≥a 20-21"]
                        }
        return relevant_info

    def verify_statement(self, statement, relevant_info, search_results):
        """X√°c minh tuy√™n b·ªë ƒë√∫ng hay sai"""
        statement_lower = statement.lower()

        # Ki·ªÉm tra th√¥ng tin t·ª´ training_program (relevant_info)
        for major, info in relevant_info.items():
            for course, fee in info.items():
                # Ki·ªÉm tra n·∫øu tuy√™n b·ªë ch·ª©a th√¥ng tin v·ªÅ h·ªçc ph√≠
                if major.lower() in statement_lower and course.lower() in statement_lower:
                    fee_str = f"{fee:,} ƒë·ªìng/t√≠n ch·ªâ"
                    if fee_str in statement_lower:
                        return True, f"ƒê√∫ng, {statement}. (Ngu·ªìn: D·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o)"
                    else:
                        # T√¨m s·ªë ti·ªÅn trong tuy√™n b·ªë ƒë·ªÉ so s√°nh
                        import re
                        numbers = re.findall(r'\d+', statement_lower.replace(",", ""))
                        if numbers:
                            stated_fee = int(numbers[0].replace(",", ""))
                            if stated_fee == fee:
                                return True, f"ƒê√∫ng, {statement}. (Ngu·ªìn: D·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o)"
                            else:
                                return False, f"Sai, {statement}. Th·ª±c t·∫ø: Ng√†nh {major} {course}: {fee:,} ƒë·ªìng/t√≠n ch·ªâ. (Ngu·ªìn: D·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o)"
        
        # Ki·ªÉm tra th√¥ng tin t·ª´ vector_store (search_results)
        for result in search_results:
            result_text = result["text"].lower()
            if statement_lower in result_text:
                return True, f"ƒê√∫ng, {statement}. (Ngu·ªìn: S·ªï tay ICTU)"
        
        # N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin kh·ªõp, tr·∫£ v·ªÅ Sai
        return False, f"Sai, kh√¥ng t√¨m th·∫•y th√¥ng tin x√°c nh·∫≠n cho {statement}. (Ngu·ªìn: D·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o)"

    def search_data(self, query, top_k=50):
        try:
            query_embedding = self.embedding_handler.generate_embeddings([query])[0]
            search_results = self.vector_store.search(query_embedding, top_k=top_k)
            
            if not search_results:
                return None, "üôÅ Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong s·ªï tay ICTU."

            # ƒê·∫øm s·ªë l∆∞·ª£ng c√¢u h·ªèi v√† reset max_priority n·∫øu c·∫ßn
            self.query_count += 1
            if self.query_count > 10:  # Reset sau 10 c√¢u h·ªèi ƒë·ªÉ tr√°nh ƒë·ªô ∆∞u ti√™n tƒÉng qu√° cao
                self.max_priority = 0
                self.query_count = 0

            query_lower = query.lower()
            relevant_keywords = []
            for topic, keywords in self.keywords.items():
                if any(keyword in query_lower for keyword in keywords):
                    relevant_keywords.extend(keywords)
                    break

            # Th√™m t·ª´ kh√≥a v√† tƒÉng ƒë·ªô ∆∞u ti√™n cho c√°c ch·ªß ƒë·ªÅ
            if "khoa" in query_lower or "ng√†nh h·ªçc" in query_lower or "li·ªát k√™" in query_lower:
                relevant_keywords.extend([
                    "khoa", "ng√†nh h·ªçc", "c∆° c·∫•u t·ªï ch·ª©c", "khoa h·ªçc c∆° b·∫£n", "c√¥ng ngh·ªá th√¥ng tin",
                    "c√¥ng ngh·ªá ƒëi·ªán t·ª≠ v√† truy·ªÅn th√¥ng", "h·ªá th·ªëng th√¥ng tin kinh t·∫ø", "c√¥ng ngh·ªá t·ª± ƒë·ªông h√≥a",
                    "truy·ªÅn th√¥ng ƒëa ph∆∞∆°ng ti·ªán", "th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠"
                ])
                self.priority_weights["khoa"] = max(self.priority_weights["khoa"] + 2, self.max_priority)
                self.priority_weights["ng√†nh h·ªçc"] = max(self.priority_weights["ng√†nh h·ªçc"] + 2, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["khoa"], self.priority_weights["ng√†nh h·ªçc"])

            # Th√™m t·ª´ kh√≥a cho c√°c ng√†nh h·ªçc t·ª´ b·∫£ng ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o
            majors = []
            for block in self.training_program.values():
                majors.extend(block["majors"])
            for major in majors:
                if major.lower() in query_lower:
                    relevant_keywords.append(major)

            # Th√™m t·ª´ kh√≥a cho h·ªçc ph√≠ v√† kh√≥a h·ªçc
            if "h·ªçc ph√≠" in query_lower or "m·ªói t√≠n ch·ªâ" in query_lower or "bao nhi√™u ti·ªÅn" in query_lower:
                relevant_keywords.extend(["h·ªçc ph√≠", "ƒë·ªìng/t√≠n ch·ªâ", "m·ªói t√≠n ch·ªâ", "kh√≥a 17", "kh√≥a 18-19", "kh√≥a 20-21"])
                self.priority_weights["h·ªçc ph√≠"] = max(self.priority_weights["h·ªçc ph√≠"] + 2, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["h·ªçc ph√≠"])
            if "kh√≥a 17" in query_lower:
                relevant_keywords.append("kh√≥a 17")
            if "kh√≥a 18" in query_lower or "kh√≥a 19" in query_lower or "kh√≥a 18-19" in query_lower:
                relevant_keywords.extend(["kh√≥a 18", "kh√≥a 19", "kh√≥a 18-19"])
            if "kh√≥a 20" in query_lower or "kh√≥a 21" in query_lower or "kh√≥a 20-21" in query_lower:
                relevant_keywords.extend(["kh√≥a 20", "kh√≥a 21", "kh√≥a 20-21"])

            # M·ªü r·ªông t·ª´ kh√≥a cho c√°c ch·ªß ƒë·ªÅ kh√°c
            if "ƒëi·ªÅu 3" in query_lower:
                relevant_keywords.extend(["ƒëi·ªÅu 3", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "k·ªπ s∆∞", "tr√¨nh ƒë·ªô b·∫≠c 7", "c·ª≠ nh√¢n"])
            if "c·ª≠ nh√¢n" in query_lower:
                relevant_keywords.extend(["c·ª≠ nh√¢n", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "ƒë·∫°i h·ªçc"])
            if "k·ªπ s∆∞" in query_lower:
                relevant_keywords.extend(["k·ªπ s∆∞", "tr√¨nh ƒë·ªô b·∫≠c 7", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "t√≠n ch·ªâ", "kh·ªëi l∆∞·ª£ng h·ªçc t·∫≠p"])
            if "x·∫øp lo·∫°i h·ªçc l·ª±c" in query_lower:
                relevant_keywords.extend(["x·∫øp lo·∫°i h·ªçc l·ª±c", "xu·∫•t s·∫Øc", "gi·ªèi", "kh√°", "trung b√¨nh", "y·∫øu", "k√©m", "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y"])
                self.priority_weights["x·∫øp lo·∫°i h·ªçc l·ª±c"] = max(self.priority_weights["x·∫øp lo·∫°i h·ªçc l·ª±c"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["x·∫øp lo·∫°i h·ªçc l·ª±c"])
            if "x·∫øp h·∫°ng h·ªçc l·ª±c" in query_lower:
                relevant_keywords.extend(["x·∫øp h·∫°ng h·ªçc l·ª±c", "h·∫°ng b√¨nh th∆∞·ªùng", "h·∫°ng y·∫øu", "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y"])
                self.priority_weights["x·∫øp h·∫°ng h·ªçc l·ª±c"] = max(self.priority_weights["x·∫øp h·∫°ng h·ªçc l·ª±c"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["x·∫øp h·∫°ng h·ªçc l·ª±c"])
            if "ƒëƒÉng nh·∫≠p" in query_lower:
                relevant_keywords.extend(["ƒëƒÉng nh·∫≠p", "m√£ sinh vi√™n", "m·∫≠t kh·∫©u", "ng√†y th√°ng nƒÉm sinh", "vi·∫øt hoa", "h·ªá th·ªëng"])
                self.priority_weights["ƒëƒÉng nh·∫≠p"] = max(self.priority_weights["ƒëƒÉng nh·∫≠p"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["ƒëƒÉng nh·∫≠p"])
            if "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower:
                relevant_keywords.extend(["ƒë·ªïi m·∫≠t kh·∫©u", "thay ƒë·ªïi m·∫≠t kh·∫©u", "c·∫≠p nh·∫≠t m·∫≠t kh·∫©u", "qu·∫£n l√Ω t√†i kho·∫£n", "ph√≤ng ƒë√†o t·∫°o", "h·ªá th·ªëng"])
                self.priority_weights["ƒë·ªïi m·∫≠t kh·∫©u"] = max(self.priority_weights["ƒë·ªïi m·∫≠t kh·∫©u"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["ƒë·ªïi m·∫≠t kh·∫©u"])
            if "ƒëƒÉng k√Ω h·ªçc" in query_lower:
                relevant_keywords.extend(["ƒëƒÉng k√Ω h·ªçc", "h·ªçc ph·∫ßn", "h·ªá th·ªëng", "ƒëƒÉng k√Ω t√≠n ch·ªâ"])
                self.priority_weights["ƒëƒÉng k√Ω h·ªçc"] = max(self.priority_weights["ƒëƒÉng k√Ω h·ªçc"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["ƒëƒÉng k√Ω h·ªçc"])
            if "thanh to√°n h·ªçc ph√≠" in query_lower or "n·ªôp ti·ªÅn tr∆∞·ªõc" in query_lower:
                relevant_keywords.extend(["thanh to√°n h·ªçc ph√≠", "online", "ƒëƒÉng k√Ω h·ªçc k·ª≥ t·ªõi", "n·ªôp ti·ªÅn tr∆∞·ªõc", "ch·ª©c nƒÉng thanh to√°n", "h·ªá th·ªëng"])
                self.priority_weights["thanh to√°n h·ªçc ph√≠"] = max(self.priority_weights["thanh to√°n h·ªçc ph√≠"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["thanh to√°n h·ªçc ph√≠"])
            if "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a" in query_lower:
                relevant_keywords.extend(["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", "ƒëi·ªÉm ngo·∫°i kh√≥a", "tham gia ho·∫°t ƒë·ªông", "ƒë√°nh gi√° ho·∫°t ƒë·ªông"])
                self.priority_weights["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a"] = max(self.priority_weights["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a"])
            if "xem l·ªãch thi" in query_lower:
                relevant_keywords.extend(["xem l·ªãch thi", "h·ªçc k·ª≥", "ƒë·ª£t h·ªçc"])
                self.priority_weights["xem l·ªãch thi"] = max(self.priority_weights["xem l·ªãch thi"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["xem l·ªãch thi"])
            if "tra c·ª©u ƒëi·ªÉm" in query_lower:
                relevant_keywords.extend(["tra c·ª©u ƒëi·ªÉm", "h·ªçc k·ª≥"])
                self.priority_weights["tra c·ª©u ƒëi·ªÉm"] = max(self.priority_weights["tra c·ª©u ƒëi·ªÉm"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["tra c·ª©u ƒëi·ªÉm"])
            if "h·ªßy h·ªçc ph·∫ßn" in query_lower:
                relevant_keywords.extend(["h·ªßy h·ªçc ph·∫ßn", "ƒëƒÉng k√Ω nh·∫ßm"])
                self.priority_weights["h·ªßy h·ªçc ph·∫ßn"] = max(self.priority_weights["h·ªßy h·ªçc ph·∫ßn"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["h·ªßy h·ªçc ph·∫ßn"])
            if "g·ª≠i tin nh·∫Øn" in query_lower:
                relevant_keywords.extend(["g·ª≠i tin nh·∫Øn", "ng∆∞·ªùi qu·∫£n tr·ªã"])
                self.priority_weights["g·ª≠i tin nh·∫Øn"] = max(self.priority_weights["g·ª≠i tin nh·∫Øn"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["g·ª≠i tin nh·∫Øn"])
            if "t·ªïng s·ªë t√≠n ch·ªâ" in query_lower or "kh·ªëi l∆∞·ª£ng h·ªçc t·∫≠p t·ªëi thi·ªÉu" in query_lower:
                relevant_keywords.extend(["t·ªïng s·ªë t√≠n ch·ªâ", "kh·ªëi l∆∞·ª£ng h·ªçc t·∫≠p t·ªëi thi·ªÉu", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "k·ªπ s∆∞", "tr√¨nh ƒë·ªô b·∫≠c 7", "c·ª≠ nh√¢n", "ƒëi·ªÅu 3"])
                self.priority_weights["t·ªïng s·ªë t√≠n ch·ªâ"] = max(self.priority_weights["t·ªïng s·ªë t√≠n ch·ªâ"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["t·ªïng s·ªë t√≠n ch·ªâ"])

            filtered_results = []
            for result in search_results:
                result_text = result.payload["text"].lower()
                keyword_score = sum(1 for keyword in relevant_keywords if keyword in result_text)
                
                # √Åp d·ª•ng ƒë·ªô ∆∞u ti√™n theo ch·ªß ƒë·ªÅ
                if "khoa" in query_lower and "khoa" in result_text:
                    keyword_score += self.priority_weights["khoa"]
                if "ng√†nh h·ªçc" in query_lower and any(major.lower() in result_text for major in majors):
                    keyword_score += self.priority_weights["ng√†nh h·ªçc"]
                if "li·ªát k√™" in query_lower and "khoa" in result_text:
                    keyword_score += self.priority_weights["khoa"]
                if "c∆° c·∫•u t·ªï ch·ª©c" in result_text:
                    keyword_score += 10  # ∆Øu ti√™n cao cho c√°c ƒëo·∫°n vƒÉn ch·ª©a danh s√°ch khoa
                if "h·ªçc ph√≠" in query_lower and "ƒë·ªìng/t√≠n ch·ªâ" in result_text:
                    keyword_score += self.priority_weights["h·ªçc ph√≠"]
                if "x·∫øp lo·∫°i h·ªçc l·ª±c" in query_lower and "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y" in result_text:
                    keyword_score += self.priority_weights["x·∫øp lo·∫°i h·ªçc l·ª±c"]
                if "x·∫øp h·∫°ng h·ªçc l·ª±c" in query_lower and "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y" in result_text:
                    keyword_score += self.priority_weights["x·∫øp h·∫°ng h·ªçc l·ª±c"]
                if "ƒëƒÉng nh·∫≠p" in query_lower and "h·ªá th·ªëng" in result_text:
                    keyword_score += self.priority_weights["ƒëƒÉng nh·∫≠p"]
                if "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower and "qu·∫£n l√Ω t√†i kho·∫£n" in result_text:
                    keyword_score += self.priority_weights["ƒë·ªïi m·∫≠t kh·∫©u"]
                if "ƒëƒÉng k√Ω h·ªçc" in query_lower and "h·ªá th·ªëng" in result_text:
                    keyword_score += self.priority_weights["ƒëƒÉng k√Ω h·ªçc"]
                if "thanh to√°n h·ªçc ph√≠" in query_lower and "h·ªá th·ªëng" in result_text:
                    keyword_score += self.priority_weights["thanh to√°n h·ªçc ph√≠"]
                if "t·ªïng s·ªë t√≠n ch·ªâ" in result_text or "kh·ªëi l∆∞·ª£ng h·ªçc t·∫≠p t·ªëi thi·ªÉu" in result_text:
                    keyword_score += self.priority_weights["t·ªïng s·ªë t√≠n ch·ªâ"]
                if "tr√¨nh ƒë·ªô b·∫≠c 7 k·ªπ s∆∞" in result_text and "t√≠n ch·ªâ" in result_text:
                    keyword_score += 3

                combined_score = result.score + (keyword_score * 0.7)
                if combined_score >= 0.1:  # Gi·∫£m ng∆∞·ª°ng t·ª´ 0.3 xu·ªëng 0.1
                    filtered_results.append({
                        "id": result.id,
                        "text": result.payload["text"],
                        "metadata": result.payload["metadata"],
                        "score": combined_score
                    })

            filtered_results = sorted(filtered_results, key=lambda x: x["score"], reverse=True)
            if not filtered_results:
                return None, "üôÅ Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong s·ªï tay ICTU (score qu√° th·∫•p)."
            return filtered_results[:top_k], None
        except Exception as e:
            return None, f"‚ùå L·ªói khi t√¨m ki·∫øm d·ªØ li·ªáu: {str(e)}"

    def create_task(self, query, search_results):
        query_lower = query.lower()
        context = "\n\n".join([result["text"] for result in search_results]) if search_results else ""
        context = context.replace("T·∫£i v·ªÅ:", "").replace(".xlsm", "")
        for page in ["133", "134", "135", "136", "137", "138", "139", "140", "141", "142"]:
            context = context.replace(page, "")

        # Thu th·∫≠p t·ª´ kh√≥a li√™n quan
        relevant_keywords = []
        for topic, keywords in self.keywords.items():
            if any(keyword in query_lower for keyword in keywords):
                relevant_keywords.extend(keywords)
                break

        majors = [m for block in self.training_program.values() for m in block["majors"]]
        if "khoa" in query_lower or "ng√†nh h·ªçc" in query_lower or "li·ªát k√™" in query_lower:
            relevant_keywords.extend([
                "khoa", "ng√†nh h·ªçc", "c∆° c·∫•u t·ªï ch·ª©c", "khoa h·ªçc c∆° b·∫£n", "c√¥ng ngh·ªá th√¥ng tin",
                "c√¥ng ngh·ªá ƒëi·ªán t·ª≠ v√† truy·ªÅn th√¥ng", "h·ªá th·ªëng th√¥ng tin kinh t·∫ø", "c√¥ng ngh·ªá t·ª± ƒë·ªông h√≥a",
                "truy·ªÅn th√¥ng ƒëa ph∆∞∆°ng ti·ªán", "th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠"
            ])
        for major in majors:
            if major.lower() in query_lower:
                relevant_keywords.append(major)
        if "h·ªçc ph√≠" in query_lower or "m·ªói t√≠n ch·ªâ" in query_lower or "bao nhi√™u ti·ªÅn" in query_lower:
            relevant_keywords.extend(["h·ªçc ph√≠", "ƒë·ªìng/t√≠n ch·ªâ", "m·ªói t√≠n ch·ªâ", "kh√≥a 17", "kh√≥a 18-19", "kh√≥a 20-21"])
        if "kh√≥a 17" in query_lower:
            relevant_keywords.append("kh√≥a 17")
        if "kh√≥a 18" in query_lower or "kh√≥a 19" in query_lower or "kh√≥a 18-19" in query_lower:
            relevant_keywords.extend(["kh√≥a 18", "kh√≥a 19", "kh√≥a 18-19"])
        if "kh√≥a 20" in query_lower or "kh√≥a 21" in query_lower or "kh√≥a 20-21" in query_lower:
            relevant_keywords.extend(["kh√≥a 20", "kh√≥a 21", "kh√≥a 20-21"])
        if "n·ªôi tr√∫" in query_lower or "ngo·∫°i tr√∫" in query_lower:
            relevant_keywords.extend(["n·ªôi tr√∫", "ngo·∫°i tr√∫", "k√Ω t√∫c x√°", "thu√™ tr·ªç", "·ªü trong tr∆∞·ªùng", "·ªü ngo√†i tr∆∞·ªùng"])
        if "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc" in query_lower:
            relevant_keywords.extend(["ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc", "y√™u c·∫ßu nh·∫≠p h·ªçc", "ƒëi·ªÉm chu·∫©n", "x√©t tuy·ªÉn"])
        if "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o" in query_lower:
            relevant_keywords.extend(["ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "t√≠n ch·ªâ", "m√¥n h·ªçc", "k·ªπ s∆∞", "c·ª≠ nh√¢n"])
        if "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a" in query_lower:
            relevant_keywords.extend(["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", "ƒëi·ªÉm ngo·∫°i kh√≥a", "s·ª± ki·ªán sinh vi√™n"])

        def has_relevant_content(keywords, context_lower, search_results):
            for keyword in keywords:
                if keyword in context_lower:
                    return True
            for result in search_results:
                result_text = result["text"].lower()
                if "khoa" in query_lower and "khoa" in result_text:
                    return True
                if "ng√†nh h·ªçc" in query_lower and any(major.lower() in result_text for major in majors):
                    return True
                if "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y" in result_text and ("x·∫øp lo·∫°i h·ªçc l·ª±c" in query_lower or "x·∫øp h·∫°ng h·ªçc l·ª±c" in query_lower):
                    return True
                if "h·ªá th·ªëng" in result_text and ("ƒëƒÉng nh·∫≠p" in query_lower or "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower or "ƒëƒÉng k√Ω h·ªçc" in query_lower or "thanh to√°n h·ªçc ph√≠" in query_lower):
                    return True
                if "qu·∫£n l√Ω t√†i kho·∫£n" in result_text and "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower:
                    return True
                if any(major.lower() in result_text for major in majors) and "ƒë·ªìng/t√≠n ch·ªâ" in result_text:
                    return True
                if ("n·ªôi tr√∫" in query_lower or "ngo·∫°i tr√∫" in query_lower) and ("k√Ω t√∫c x√°" in result_text or "thu√™ tr·ªç" in result_text):
                    return True
                if "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc" in query_lower and any(k in result_text for k in ["ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc", "y√™u c·∫ßu nh·∫≠p h·ªçc", "ƒëi·ªÉm chu·∫©n"]):
                    return True
                if "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o" in query_lower and any(k in result_text for k in ["ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "t√≠n ch·ªâ", "m√¥n h·ªçc"]):
                    return True
                if "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a" in query_lower and any(k in result_text for k in ["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", "ƒëi·ªÉm ngo·∫°i kh√≥a"]):
                    return True
            return False

        # X·ª≠ l√Ω c√¢u h·ªèi so s√°nh
        if self.is_comparison_question(query):
            if "h·ªçc ph√≠" in query_lower:
                return Task(
                    description=f"""
                        So s√°nh h·ªçc ph√≠ d·ª±a tr√™n c√¢u h·ªèi: '{query}'.
                        ‚ö†Ô∏è Y√™u c·∫ßu:
                        - Tr√≠ch xu·∫•t h·ªçc ph√≠ t·ª´ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o (self.training_program) cho c√°c ng√†nh ho·∫∑c kh√≥a ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong c√¢u h·ªèi.
                        - X√°c ƒë·ªãnh ng√†nh A (ng√†nh ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ƒê·∫¶U TI√äN trong c√¢u h·ªèi) v√† ng√†nh B (ng√†nh ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p TH·ª® HAI trong c√¢u h·ªèi) d·ª±a tr√™n th·ª© t·ª± xu·∫•t hi·ªán trong c√¢u h·ªèi.
                        - N·∫øu c√¢u h·ªèi n√™u c·ª• th·ªÉ c√°c ng√†nh (v√≠ d·ª•: C√¥ng ngh·ªá th√¥ng tin, Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠), li·ªát k√™ h·ªçc ph√≠ c·ªßa ng√†nh A tr∆∞·ªõc, sau ƒë√≥ ng√†nh B, theo kh√≥a ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh (ho·∫∑c m·∫∑c ƒë·ªãnh Kh√≥a 18-19 n·∫øu kh√¥ng c√≥ kh√≥a).
                        - N·∫øu c√¢u h·ªèi n√™u c√°c kh√≥a (v√≠ d·ª•: Kh√≥a 17, Kh√≥a 20-21), so s√°nh h·ªçc ph√≠ c·ªßa ng√†nh ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p qua c√°c kh√≥a, nh∆∞ng v·∫´n ∆∞u ti√™n th·ª© t·ª± ng√†nh A tr∆∞·ªõc.
                        - So s√°nh v√† n√™u r√µ ƒëi·ªÉm kh√°c nhau, lu√¥n l·∫•y ng√†nh A l√†m tham chi·∫øu:
                        - N·∫øu h·ªçc ph√≠ ng√†nh A l·ªõn h∆°n ng√†nh B, tr·∫£ v·ªÅ: "H·ªçc ph√≠ ng√†nh A l·ªõn h∆°n ng√†nh B (ch√™nh l·ªách X ƒë·ªìng/t√≠n ch·ªâ)."
                        - N·∫øu h·ªçc ph√≠ ng√†nh A nh·ªè h∆°n ng√†nh B, tr·∫£ v·ªÅ: "H·ªçc ph√≠ ng√†nh A nh·ªè h∆°n ng√†nh B (ch√™nh l·ªách X ƒë·ªìng/t√≠n ch·ªâ)."
                        - N·∫øu h·ªçc ph√≠ b·∫±ng nhau, tr·∫£ v·ªÅ: "H·ªçc ph√≠ ng√†nh A b·∫±ng ng√†nh B."
                        - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi r√µ r√†ng, v√≠ d·ª•:
                        - Ng√†nh C√¥ng ngh·ªá th√¥ng tin Kh√≥a 20-21: 467,700 ƒë·ªìng/t√≠n ch·ªâ
                        - Ng√†nh Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ Kh√≥a 20-21: 403,200 ƒë·ªìng/t√≠n ch·ªâ
                        - ƒêi·ªÉm kh√°c nhau: H·ªçc ph√≠ ng√†nh C√¥ng ngh·ªá th√¥ng tin l·ªõn h∆°n ng√†nh Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ (ch√™nh l·ªách 64,500 ƒë·ªìng/t√≠n ch·ªâ).
                        - N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, tr·∫£ v·ªÅ: "Kh√¥ng t√¨m th·∫•y th√¥ng tin h·ªçc ph√≠ cho c√°c ng√†nh ho·∫∑c kh√≥a y√™u c·∫ßu."
                        - KH√îNG suy ƒëo√°n, th√™m th√¥ng tin ngo√†i, ho·∫∑c thay ƒë·ªïi th·ª© t·ª± ng√†nh.
                        - PH·∫¢I tr·∫£ v·ªÅ CH√çNH X√ÅC k·∫øt qu·∫£ t·ª´ self.compare_tuition_fees(query) m√† KH√îNG ƒë∆∞·ª£c di·ªÖn gi·∫£i l·∫°i, ch·ªânh s·ª≠a, ho·∫∑c thay ƒë·ªïi th·ª© t·ª±.
                        - K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c t√≠nh to√°n s·∫µn trong expected_output, ch·ªâ c·∫ßn sao ch√©p nguy√™n vƒÉn.
                        - ƒê·∫£m b·∫£o th·ª© t·ª±: ng√†nh A (ƒë·∫ßu ti√™n trong c√¢u h·ªèi) lu√¥n ƒë∆∞·ª£c li·ªát k√™ v√† so s√°nh tr∆∞·ªõc ng√†nh B.
                        Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                    """,
                    agent=self.agent,
                    expected_output=self.compare_tuition_fees(query)
                )
            elif "n·ªôi tr√∫" in query_lower or "ngo·∫°i tr√∫" in query_lower:
                return Task(
                    description=f"""
                        So s√°nh sinh vi√™n n·ªôi tr√∫ v√† ngo·∫°i tr√∫ d·ª±a tr√™n c√¢u h·ªèi: '{query}' t·ª´ n·ªôi dung sau:
                        {context}

                        ‚ö†Ô∏è Y√™u c·∫ßu:
                        - Tr√≠ch xu·∫•t th√¥ng tin v·ªÅ sinh vi√™n n·ªôi tr√∫ (li√™n quan ƒë·∫øn "n·ªôi tr√∫", "k√Ω t√∫c x√°", "·ªü trong tr∆∞·ªùng") v√† ngo·∫°i tr√∫ (li√™n quan ƒë·∫øn "ngo·∫°i tr√∫", "thu√™ tr·ªç", "·ªü ngo√†i tr∆∞·ªùng") t·ª´ n·ªôi dung cung c·∫•p.
                        - Li·ªát k√™ c√°c ƒë·∫∑c ƒëi·ªÉm c·ªßa n·ªôi tr√∫ v√† ngo·∫°i tr√∫, n√™u r√µ ƒëi·ªÉm kh√°c nhau (v√≠ d·ª•: chi ph√≠, ƒëi·ªÅu ki·ªán sinh ho·∫°t, quy·ªÅn l·ª£i, h·∫°n ch·∫ø).
                        - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi r√µ r√†ng, v√≠ d·ª•:
                        - Sinh vi√™n n·ªôi tr√∫:
                            - [Th√¥ng tin 1, v√≠ d·ª•: Chi ph√≠ th·∫•p h∆°n, 500,000-1,000,000 ƒë·ªìng/th√°ng]
                            - [Th√¥ng tin 2, v√≠ d·ª•: G·∫ßn tr∆∞·ªùng, ti·ªán di chuy·ªÉn]
                        - Sinh vi√™n ngo·∫°i tr√∫:
                            - [Th√¥ng tin 1, v√≠ d·ª•: Chi ph√≠ cao h∆°n, 1,500,000-3,000,000 ƒë·ªìng/th√°ng]
                            - [Th√¥ng tin 2, v√≠ d·ª•: T·ª± do th·ªùi gian]
                        - ƒêi·ªÉm kh√°c nhau: [T√≥m t·∫Øt s·ª± kh√°c bi·ªát, v√≠ d·ª•: N·ªôi tr√∫ chi ph√≠ th·∫•p h∆°n nh∆∞ng c√≥ gi·ªù gi·ªõi nghi√™m, ngo·∫°i tr√∫ t·ª± do h∆°n nh∆∞ng chi ph√≠ cao].
                        - Ch·ªâ tr√≠ch xu·∫•t t·ªëi ƒëa 3 th√¥ng tin cho m·ªói lo·∫°i ƒë·ªÉ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn.
                        - N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, tr·∫£ l·ªùi: "Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ sinh vi√™n n·ªôi tr√∫ ho·∫∑c ngo·∫°i tr√∫ trong s·ªï tay ICTU."
                        - Kh√¥ng th√™m th√¥ng tin ngo√†i n·ªôi dung cung c·∫•p.
                        Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                    """,
                    agent=self.agent,
                    expected_output=self.compare_resident_nonresident(query, search_results)
                )
            elif "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc" in query_lower:
                return Task(
                    description=f"""
                        So s√°nh ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc d·ª±a tr√™n c√¢u h·ªèi: '{query}' t·ª´ n·ªôi dung sau:
                        {context}

                        ‚ö†Ô∏è Y√™u c·∫ßu:
                        - Tr√≠ch xu·∫•t th√¥ng tin v·ªÅ ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc (li√™n quan ƒë·∫øn "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc", "y√™u c·∫ßu nh·∫≠p h·ªçc", "ƒëi·ªÉm chu·∫©n", "x√©t tuy·ªÉn") t·ª´ n·ªôi dung cung c·∫•p.
                        - N·∫øu c√¢u h·ªèi n√™u c·ª• th·ªÉ c√°c ng√†nh (v√≠ d·ª•: C√¥ng ngh·ªá th√¥ng tin, Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠), li·ªát k√™ ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc c·ªßa t·ª´ng ng√†nh v√† n√™u ƒëi·ªÉm kh√°c nhau (v√≠ d·ª•: ƒëi·ªÉm chu·∫©n, t·ªï h·ª£p m√¥n, ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn).
                        - N·∫øu kh√¥ng c√≥ ng√†nh c·ª• th·ªÉ, cung c·∫•p th√¥ng tin chung v·ªÅ ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc v√† so s√°nh c√°c kh√≠a c·∫°nh (v√≠ d·ª•: x√©t tuy·ªÉn h·ªçc b·∫° vs thi THPT).
                        - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi r√µ r√†ng, v√≠ d·ª•:
                        - Ng√†nh X: [ƒêi·ªÅu ki·ªán, v√≠ d·ª•: ƒêi·ªÉm chu·∫©n 25.5, t·ªï h·ª£p A00]
                        - Ng√†nh Y: [ƒêi·ªÅu ki·ªán, v√≠ d·ª•: ƒêi·ªÉm chu·∫©n 24.0, t·ªï h·ª£p A00, D01]
                        - ƒêi·ªÉm kh√°c nhau: [T√≥m t·∫Øt, v√≠ d·ª•: Ng√†nh X c√≥ ƒëi·ªÉm chu·∫©n cao h∆°n, kh√¥ng ch·∫•p nh·∫≠n D01].
                        - Ch·ªâ tr√≠ch xu·∫•t t·ªëi ƒëa 3 th√¥ng tin cho m·ªói ng√†nh ho·∫∑c ch·ªß ƒë·ªÅ ƒë·ªÉ ng·∫Øn g·ªçn.
                        - N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, tr·∫£ l·ªùi: "Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc trong s·ªï tay ICTU."
                        - Kh√¥ng th√™m th√¥ng tin ngo√†i n·ªôi dung cung c·∫•p.
                        Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                    """,
                    agent=self.agent,
                    expected_output=self.compare_generic(query, search_results, "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc")
                )
            elif "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o" in query_lower:
                return Task(
                    description=f"""
                        So s√°nh ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o d·ª±a tr√™n c√¢u h·ªèi: '{query}' t·ª´ n·ªôi dung sau:
                        {context}

                        ‚ö†Ô∏è Y√™u c·∫ßu:
                        - Tr√≠ch xu·∫•t th√¥ng tin v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o (li√™n quan ƒë·∫øn "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "t√≠n ch·ªâ", "m√¥n h·ªçc", "k·ªπ s∆∞", "c·ª≠ nh√¢n") t·ª´ n·ªôi dung cung c·∫•p.
                        - N·∫øu c√¢u h·ªèi n√™u c·ª• th·ªÉ c√°c ng√†nh (v√≠ d·ª•: K·ªπ thu·∫≠t ph·∫ßn m·ªÅm, Khoa h·ªçc m√°y t√≠nh), li·ªát k√™ ƒë·∫∑c ƒëi·ªÉm ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o c·ªßa t·ª´ng ng√†nh v√† n√™u ƒëi·ªÉm kh√°c nhau (v√≠ d·ª•: s·ªë t√≠n ch·ªâ, m√¥n h·ªçc ch√≠nh, ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp).
                        - N·∫øu kh√¥ng c√≥ ng√†nh c·ª• th·ªÉ, cung c·∫•p th√¥ng tin chung v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o v√† so s√°nh c√°c kh√≠a c·∫°nh (v√≠ d·ª•: k·ªπ s∆∞ vs c·ª≠ nh√¢n).
                        - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi r√µ r√†ng, v√≠ d·ª•:
                        - Ng√†nh X: [T·ªïng 150 t√≠n ch·ªâ, t·∫≠p trung v√†o...]
                        - Ng√†nh Y: [T·ªïng 145 t√≠n ch·ªâ, bao g·ªìm m√¥n...]
                        - ƒêi·ªÉm kh√°c nhau: [T√≥m t·∫Øt, v√≠ d·ª•: Ng√†nh X c√≥ nhi·ªÅu t√≠n ch·ªâ h∆°n, t·∫≠p trung th·ª±c h√†nh].
                        - Ch·ªâ tr√≠ch xu·∫•t t·ªëi ƒëa 3 th√¥ng tin cho m·ªói ng√†nh ho·∫∑c ch·ªß ƒë·ªÅ ƒë·ªÉ ng·∫Øn g·ªçn.
                        - N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, tr·∫£ l·ªùi: "Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o trong s·ªï tay ICTU."
                        - Kh√¥ng th√™m th√¥ng tin ngo√†i n·ªôi dung cung c·∫•p.
                        Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                    """,
                    agent=self.agent,
                    expected_output=self.compare_generic(query, search_results, "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o")
                )
            elif "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a" in query_lower:
                return Task(
                    description=f"""
                        So s√°nh ho·∫°t ƒë·ªông ngo·∫°i kh√≥a d·ª±a tr√™n c√¢u h·ªèi: '{query}' t·ª´ n·ªôi dung sau:
                        {context}

                        ‚ö†Ô∏è Y√™u c·∫ßu:
                        - Tr√≠ch xu·∫•t th√¥ng tin v·ªÅ ho·∫°t ƒë·ªông ngo·∫°i kh√≥a (li√™n quan ƒë·∫øn "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", "ƒëi·ªÉm ngo·∫°i kh√≥a", "s·ª± ki·ªán sinh vi√™n") t·ª´ n·ªôi dung cung c·∫•p.
                        - N·∫øu c√¢u h·ªèi n√™u c·ª• th·ªÉ c√°c ng√†nh ho·∫∑c nh√≥m (v√≠ d·ª•: C√¥ng ngh·ªá th√¥ng tin, Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠), li·ªát k√™ c√°c ho·∫°t ƒë·ªông ngo·∫°i kh√≥a li√™n quan ƒë·∫øn t·ª´ng ng√†nh ho·∫∑c nh√≥m v√† n√™u ƒëi·ªÉm kh√°c nhau (v√≠ d·ª•: lo·∫°i s·ª± ki·ªán, t·∫ßn su·∫•t).
                        - N·∫øu kh√¥ng c√≥ ng√†nh c·ª• th·ªÉ, cung c·∫•p th√¥ng tin chung v·ªÅ ho·∫°t ƒë·ªông ngo·∫°i kh√≥a v√† so s√°nh c√°c kh√≠a c·∫°nh (v√≠ d·ª•: ho·∫°t ƒë·ªông c·ªßa khoa vs to√†n tr∆∞·ªùng).
                        - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi r√µ r√†ng, v√≠ d·ª•:
                        - Ng√†nh X: [Ho·∫°t ƒë·ªông 1, v√≠ d·ª•: Cu·ªôc thi l·∫≠p tr√¨nh]
                        - Ng√†nh Y: [Ho·∫°t ƒë·ªông 2, v√≠ d·ª•: H·ªôi th·∫£o th∆∞∆°ng m·∫°i]
                        - ƒêi·ªÉm kh√°c nhau: [T√≥m t·∫Øt, v√≠ d·ª•: Ng√†nh X t·∫≠p trung k·ªπ thu·∫≠t, Ng√†nh Y thi√™n v·ªÅ kinh doanh].
                        - Ch·ªâ tr√≠ch xu·∫•t t·ªëi ƒëa 3 th√¥ng tin cho m·ªói ng√†nh ho·∫∑c ch·ªß ƒë·ªÅ ƒë·ªÉ ng·∫Øn g·ªçn.
                        - N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, tr·∫£ l·ªùi: "Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ho·∫°t ƒë·ªông ngo·∫°i kh√≥a trong s·ªï tay ICTU."
                        - Kh√¥ng th√™m th√¥ng tin ngo√†i n·ªôi dung cung c·∫•p.
                        Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                    """,
                    agent=self.agent,
                    expected_output=self.compare_generic(query, search_results, "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a")
                )

        # X·ª≠ l√Ω c√¢u h·ªèi h·ªçc ph√≠ ƒë∆°n l·∫ª
        if any(major.lower() in query_lower for major in majors) and ("h·ªçc ph√≠" in query_lower or "m·ªói t√≠n ch·ªâ" in query_lower or "bao nhi√™u ti·ªÅn" in query_lower):
            for major in majors:
                if major.lower() in query_lower:
                    selected_major = major
                    break
            for block_name, block in self.training_program.items():
                if selected_major in block["majors"]:
                    if "kh√≥a 17" in query_lower:
                        tuition_fee = block["Kh√≥a 17"]
                        return Task(
                            description=f"""
                                Tr·∫£ l·ªùi h·ªçc ph√≠ c·ªßa ng√†nh {selected_major} cho Kh√≥a 17.
                                ‚ö†Ô∏è Y√™u c·∫ßu:
                                - Tr√≠ch xu·∫•t h·ªçc ph√≠ t·ª´ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o.
                                - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi: "Ng√†nh {selected_major} Kh√≥a 17: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                                - Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ self.training_program.
                                Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                            """,
                            agent=self.agent,
                            expected_output=f"Ng√†nh {selected_major} Kh√≥a 17: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                        )
                    elif "kh√≥a 18-19" in query_lower or "kh√≥a 18" in query_lower or "kh√≥a 19" in query_lower:
                        tuition_fee = block["Kh√≥a 18-19"]
                        return Task(
                            description=f"""
                                Tr·∫£ l·ªùi h·ªçc ph√≠ c·ªßa ng√†nh {selected_major} cho Kh√≥a 18-19.
                                ‚ö†Ô∏è Y√™u c·∫ßu:
                                - Tr√≠ch xu·∫•t h·ªçc ph√≠ t·ª´ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o.
                                - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi: "Ng√†nh {selected_major} Kh√≥a 18-19: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                                - Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ self.training_program.
                                Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                            """,
                            agent=self.agent,
                            expected_output=f"Ng√†nh {selected_major} Kh√≥a 18-19: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                        )
                    elif "kh√≥a 20-21" in query_lower or "kh√≥a 20" in query_lower or "kh√≥a 21" in query_lower:
                        tuition_fee = block["Kh√≥a 20-21"]
                        return Task(
                            description=f"""
                                Tr·∫£ l·ªùi h·ªçc ph√≠ c·ªßa ng√†nh {selected_major} cho Kh√≥a 20-21.
                                ‚ö†Ô∏è Y√™u c·∫ßu:
                                - Tr√≠ch xu·∫•t h·ªçc ph√≠ t·ª´ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o.
                                - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi: "Ng√†nh {selected_major} Kh√≥a 20-21: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                                - Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ self.training_program.
                                Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                            """,
                            agent=self.agent,
                            expected_output=f"Ng√†nh {selected_major} Kh√≥a 20-21: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                        )
                    else:
                        tuition_fee = block["Kh√≥a 18-19"]
                        return Task(
                            description=f"""
                                Tr·∫£ l·ªùi h·ªçc ph√≠ c·ªßa ng√†nh {selected_major} cho kh√≥a kh√¥ng x√°c ƒë·ªãnh (m·∫∑c ƒë·ªãnh Kh√≥a 18-19).
                                ‚ö†Ô∏è Y√™u c·∫ßu:
                                - Tr√≠ch xu·∫•t h·ªçc ph√≠ t·ª´ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o.
                                - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi: "Ng√†nh {selected_major}: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ (theo ƒë∆°n gi√° Kh√≥a 18-19 cho c√°c kh√≥a kh√¥ng x√°c ƒë·ªãnh)."
                                - Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ self.training_program.
                                Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                            """,
                            agent=self.agent,
                            expected_output=f"Ng√†nh {selected_major}: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ (theo ƒë∆°n gi√° Kh√≥a 18-19 cho c√°c kh√≥a kh√¥ng x√°c ƒë·ªãnh)."
                        )

        # X·ª≠ l√Ω c√¢u h·ªèi li·ªát k√™ c√°c ng√†nh h·ªçc
        if "li·ªát k√™ c√°c ng√†nh h·ªçc" in query_lower or "danh s√°ch ng√†nh h·ªçc" in query_lower:
            all_majors = []
            for block_name, block in self.training_program.items():
                all_majors.extend(block["majors"])
            majors_list = "\n".join([f"- {major}" for major in all_majors])
            return Task(
                description=f"""
                    Li·ªát k√™ c√°c ng√†nh h·ªçc t·ª´ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ƒë·∫°i tr√†.
                    ‚ö†Ô∏è Y√™u c·∫ßu:
                    - Tr√≠ch xu·∫•t danh s√°ch ng√†nh h·ªçc t·ª´ d·ªØ li·ªáu ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o (self.training_program).
                    - ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi:
                    - Danh s√°ch c√°c ng√†nh h·ªçc t·∫°i ICTU:
                        - [Ng√†nh 1]
                        - [Ng√†nh 2]
                        ...
                    - Kh√¥ng th√™m th√¥ng tin ngo√†i d·ªØ li·ªáu cung c·∫•p.
                    Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                """,
                agent=self.agent,
                expected_output=f"Danh s√°ch c√°c ng√†nh h·ªçc t·∫°i ICTU:\n{majors_list}"
            )

        # X·ª≠ l√Ω c√°c c√¢u h·ªèi kh√°c
        task_description = f"""
            Tr√≠ch xu·∫•t th√¥ng tin ch√≠nh x√°c ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi: '{query}' t·ª´ n·ªôi dung sau:
            {context}

            ‚ö†Ô∏è Y√™u c·∫ßu:
            - Ch·ªâ tr√≠ch xu·∫•t ƒë√∫ng n·ªôi dung li√™n quan nh·∫•t t·ª´ ƒëo·∫°n vƒÉn tr√™n.
            - ∆Øu ti√™n c√°c ƒëo·∫°n vƒÉn ch·ª©a c√°c t·ª´ kh√≥a: {', '.join(relevant_keywords)}.
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "li·ªát k√™ c√°c khoa" ho·∫∑c "c√°c khoa t·∫°i ICTU", tr√≠ch xu·∫•t danh s√°ch c√°c khoa t·ª´ c√°c ƒëo·∫°n vƒÉn ch·ª©a t·ª´ kh√≥a "khoa" v√† li·ªát k√™ ƒë·∫ßy ƒë·ªß.
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ng√†nh h·ªçc" ho·∫∑c "li·ªát k√™ c√°c ng√†nh h·ªçc", tr√≠ch xu·∫•t th√¥ng tin v·ªÅ c√°c ng√†nh h·ªçc n·∫øu c√≥. N·∫øu kh√¥ng, suy lu·∫≠n t·ª´ t√™n khoa (v√≠ d·ª•: Khoa C√¥ng ngh·ªá Th√¥ng tin c√≥ th·ªÉ c√≥ ng√†nh C√¥ng ngh·ªá Th√¥ng tin) v√† ghi r√µ l√† suy lu·∫≠n.
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "x·∫øp lo·∫°i h·ªçc l·ª±c", tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "x·∫øp lo·∫°i h·ªçc l·ª±c", "xu·∫•t s·∫Øc", "gi·ªèi", "kh√°", "trung b√¨nh", "y·∫øu", "k√©m", ho·∫∑c "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "x·∫øp h·∫°ng h·ªçc l·ª±c", tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "x·∫øp h·∫°ng h·ªçc l·ª±c", "h·∫°ng b√¨nh th∆∞·ªùng", "h·∫°ng y·∫øu", ho·∫∑c "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ƒëƒÉng nh·∫≠p", tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "ƒëƒÉng nh·∫≠p", "m√£ sinh vi√™n", "m·∫≠t kh·∫©u", "ng√†y th√°ng nƒÉm sinh", "vi·∫øt hoa", "h·ªá th·ªëng".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ƒë·ªïi m·∫≠t kh·∫©u", tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "ƒë·ªïi m·∫≠t kh·∫©u", "thay ƒë·ªïi m·∫≠t kh·∫©u", "c·∫≠p nh·∫≠t m·∫≠t kh·∫©u", "qu·∫£n l√Ω t√†i kho·∫£n", "ph√≤ng ƒë√†o t·∫°o", "h·ªá th·ªëng".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ƒëƒÉng k√Ω h·ªçc", tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "ƒëƒÉng k√Ω h·ªçc", "h·ªçc ph·∫ßn", "h·ªá th·ªëng", "ƒëƒÉng k√Ω t√≠n ch·ªâ".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "thanh to√°n h·ªçc ph√≠" ho·∫∑c "n·ªôp ti·ªÅn tr∆∞·ªõc", tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "thanh to√°n h·ªçc ph√≠", "online", "ƒëƒÉng k√Ω h·ªçc k·ª≥ t·ªõi", "n·ªôp ti·ªÅn tr∆∞·ªõc", "ch·ª©c nƒÉng thanh to√°n", "h·ªá th·ªëng".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "n·ªôi tr√∫" ho·∫∑c "ngo·∫°i tr√∫", tr√≠ch xu·∫•t c√°c ƒëo·∫°n vƒÉn ch·ª©a "n·ªôi tr√∫", "ngo·∫°i tr√∫", "k√Ω t√∫c x√°", "thu√™ tr·ªç", "·ªü trong tr∆∞·ªùng", "·ªü ngo√†i tr∆∞·ªùng".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc", tr√≠ch xu·∫•t c√°c ƒëo·∫°n vƒÉn ch·ª©a "ƒëi·ªÅu ki·ªán nh·∫≠p h·ªçc", "y√™u c·∫ßu nh·∫≠p h·ªçc", "ƒëi·ªÉm chu·∫©n", "x√©t tuy·ªÉn".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", tr√≠ch xu·∫•t c√°c ƒëo·∫°n vƒÉn ch·ª©a "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "t√≠n ch·ªâ", "m√¥n h·ªçc", "k·ªπ s∆∞", "c·ª≠ nh√¢n".
            - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", tr√≠ch xu·∫•t c√°c ƒëo·∫°n vƒÉn ch·ª©a "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", "ƒëi·ªÉm ngo·∫°i kh√≥a", "s·ª± ki·ªán sinh vi√™n".
            - N·∫øu c√¢u h·ªèi kh√¥ng thu·ªôc c√°c ch·ªß ƒë·ªÅ tr√™n, tr√≠ch xu·∫•t c√°c ƒëo·∫°n vƒÉn li√™n quan nh·∫•t d·ª±a tr√™n t·ª´ kh√≥a v√† ng·ªØ nghƒ©a c·ªßa c√¢u h·ªèi.
            - KH√îNG ƒë∆∞·ª£c vi·∫øt l·∫°i, di·ªÖn gi·∫£i l·∫°i hay s√°ng t·∫°o th√™m th√¥ng tin ngo√†i n·ªôi dung cung c·∫•p.
            - N·∫øu trong ƒëo·∫°n vƒÉn c√≥ c√¢u tr·∫£ l·ªùi tr·ª±c ti·∫øp, tr√≠ch nguy√™n vƒÉn.
            - N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p, tr·∫£ l·ªùi: **"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU."**

            Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
        """
        task = Task(
            description=task_description,
            agent=self.agent,
            expected_output="Tr√≠ch xu·∫•t nguy√™n vƒÉn th√¥ng tin li√™n quan t·ª´ ƒëo·∫°n vƒÉn, kh√¥ng t√≥m t·∫Øt, kh√¥ng di·ªÖn gi·∫£i."
        )
        return task
    
    def run(self, query, top_k=5):
        # Ki·ªÉm tra n·∫øu c√¢u h·ªèi l√† d·∫°ng ƒë√∫ng/sai
        if self.is_true_false_question(query):
            statement = self.extract_statement(query)
            search_results, error = self.search_data(query, top_k)
            if error:
                print(error)
                return error
            relevant_info = self.get_relevant_info(query)
            is_true, explanation = self.verify_statement(statement, relevant_info, search_results)
            self.chat_history.append((query, explanation))
            return explanation

        # X·ª≠ l√Ω c√°c c√¢u h·ªèi th√¥ng tin b√¨nh th∆∞·ªùng
        search_results, error = self.search_data(query, top_k)
        print("\nüí¨ K·∫øt qu·∫£ t√¨m ki·∫øm t·ª´ Qdrant:")
        if error:
            print(error)
            return error
        else:
            for i, result in enumerate(search_results):
                print(f"\nK·∫øt qu·∫£ {i + 1} (Score: {result['score']:.4f}):")
                print(f"ID: {result['id']}")
                print("Text (to√†n b·ªô n·ªôi dung):")
                print(result['text'])
                print(f"Metadata: {result['metadata']}")

        print("\nüìù Di·ªÖn gi·∫£i v√† tr·∫£ l·ªùi c√¢u h·ªèi b·∫±ng LLM...")
        try:
            task = self.create_task(query, search_results)
            # Debug: In expected_output
            print("\nüîç Expected Output t·ª´ compare_tuition_fees:")
            print(task.expected_output)
            crew = Crew(agents=[self.agent], tasks=[task], verbose=2)
            result = crew.kickoff()
            # L·∫•y ID t·ª´ k·∫øt qu·∫£ c√≥ n·ªôi dung kh·ªõp v·ªõi c√¢u tr·∫£ l·ªùi
            if search_results:
                relevant_result = None
                for res in search_results:
                    if result.strip() in res['text'].strip():
                        relevant_result = res
                        break
                if not relevant_result:
                    for res in search_results:
                        if "ƒêo√†n thanh ni√™n" in res['text'] and "Nh√† ƒëi·ªÅu h√†nh C1" in res['text']:
                            relevant_result = res
                            break
                if not relevant_result:
                    relevant_result = search_results[0]
                result_with_id = result
            else:
                result_with_id = result
            self.chat_history.append((query, result_with_id))
            return result_with_id
        except Exception as e:
            error_msg = f"‚ùå L·ªói khi di·ªÖn gi·∫£i d·ªØ li·ªáu: {str(e)}"
            print(error_msg)
            return error_msg


if __name__ == "__main__":
    print("üöÄ Kh·ªüi ƒë·ªông ChatBotAgent...")
    try:
        bot = ChatBotAgent()
        print("üëã Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω ·∫£o h·ªó tr·ª£ sinh vi√™n ICTU.")
        print("H√£y nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (nh·∫≠p 'exit' ƒë·ªÉ tho√°t):")

        while True:
            # Nh·∫≠n c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng qua terminal
            query = input("\nüìù C√¢u h·ªèi c·ªßa b·∫°n: ").strip()

            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán tho√°t
            if query.lower() == "exit":
                print("\nüëã T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n.")
                break

            # Ki·ªÉm tra n·∫øu c√¢u h·ªèi r·ªóng
            if not query:
                print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")
                continue

            # X·ª≠ l√Ω c√¢u h·ªèi v√† in ph·∫£n h·ªìi
            print(f"\nüìù ƒêang x·ª≠ l√Ω c√¢u h·ªèi: {query}")
            response = bot.run(query, top_k=12)
            print("\nüí¨ Ph·∫£n h·ªìi t·ª´ tr·ª£ l√Ω:")
            print(response)
            print("\n" + "="*50)

    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông ho·∫∑c ch·∫°y agent: {e}")
    print("üéâ Ho√†n t·∫•t!")