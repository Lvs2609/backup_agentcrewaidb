from crewai import Agent, Task, Crew
from embeddings import EmbeddingHandler
from vector_store import VectorStore
from llm_config import get_llm
from keywords import KEYWORDS

class ChatBotAgent:
    def __init__(self):
        self.embedding_handler = EmbeddingHandler()
        self.vector_store = VectorStore()
        self.llm = get_llm()
        self.keywords = KEYWORDS

        # Kh·ªüi t·∫°o ƒë·ªô ∆∞u ti√™n cho c√°c ch·ªß ƒë·ªÅ
        self.priority_weights = {
            "khoa": 5,
            "ng√†nh h·ªçc": 5,
            "h·ªçc ph√≠": 5,
            "x·∫øp lo·∫°i h·ªçc l·ª±c": 2,
            "x·∫øp h·∫°ng h·ªçc l·ª±c": 2,
            "ƒëƒÉng nh·∫≠p": 1,
            "ƒë·ªïi m·∫≠t kh·∫©u": 1,
            "ƒëƒÉng k√Ω h·ªçc": 1,
            "thanh to√°n h·ªçc ph√≠": 1,
            "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a": 1,
            "xem l·ªãch thi": 1,
            "tra c·ª©u ƒëi·ªÉm": 1,
            "h·ªßy h·ªçc ph·∫ßn": 1,
            "g·ª≠i tin nh·∫Øn": 1,
            "t·ªïng s·ªë t√≠n ch·ªâ": 2,
        }
        # L∆∞u tr·ªØ ƒë·ªô ∆∞u ti√™n cao nh·∫•t t·ª´ c√°c c√¢u h·ªèi tr∆∞·ªõc
        self.max_priority = 0
        # ƒê·∫øm s·ªë l∆∞·ª£ng c√¢u h·ªèi ƒë·ªÉ reset max_priority n·∫øu c·∫ßn
        self.query_count = 0
        # Th√™m danh s√°ch ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ chat kh√¥ng gi·ªõi h·∫°n
        self.chat_history = []  # Danh s√°ch l∆∞u tr·ªØ c√°c c·∫∑p (query, response)

        # L∆∞u tr·ªØ b·∫£ng ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ƒë·∫°i tr√†
        self.training_program = {
            "II: Ngh·ªá thu·∫≠t": {
                "majors": ["Thi·∫øt k·∫ø ƒë·ªì h·ªça"],
                "Kh√≥a 17": 372000,
                "Kh√≥a 18-19": 369200,
                "Kh√≥a 20-21": 387000
            },
            "III: Kinh doanh v√† qu·∫£n l√Ω, ph√°p lu·∫≠t": {
                "majors": ["H·ªá th·ªëng th√¥ng tin qu·∫£n l√Ω", "Qu·∫£n tr·ªã vƒÉn ph√≤ng", "Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠", "Kinh t·∫ø s·ªë"],
                "Kh√≥a 17": 387500,
                "Kh√≥a 18-19": 384600,
                "Kh√≥a 20-21": 403200
            },
            "V: M√°y t√≠nh v√† c√¥ng ngh·ªá th√¥ng tin, C√¥ng ngh·ªá k·ªπ thu·∫≠t‚Ä¶": {
                "majors": [
                    "C√¥ng ngh·ªá th√¥ng tin", "Khoa h·ªçc m√°y t√≠nh", "Truy·ªÅn th√¥ng v√† m·∫°ng m√°y t√≠nh", "K·ªπ thu·∫≠t ph·∫ßn m·ªÅm",
                    "H·ªá th·ªëng th√¥ng tin", "An to√†n th√¥ng tin", "C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªán, ƒëi·ªán t·ª≠",
                    "C√¥ng ngh·ªá √¥ t√¥ v√† Giao th√¥ng th√¥ng minh", "C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªÅu khi·ªÉn v√† t·ª± ƒë·ªông h√≥a",
                    "C√¥ng ngh·ªá k·ªπ thu·∫≠t m√°y t√≠nh", "C√¥ng ngh·ªá k·ªπ thu·∫≠t ƒëi·ªán t·ª≠, vi·ªÖn th√¥ng", "K·ªπ thu·∫≠t y sinh",
                    "K·ªπ thu·∫≠t c∆° ƒëi·ªán t·ª≠ th√¥ng minh v√† robot"
                ],
                "Kh√≥a 17": 453000,
                "Kh√≥a 18-19": 450000,
                "Kh√≥a 20-21": 467700
            },
            "VII: B√°o ch√≠ v√† th√¥ng tin‚Ä¶": {
                "majors": ["Truy·ªÅn th√¥ng ƒëa ph∆∞∆°ng ti·ªán", "C√¥ng ngh·ªá truy·ªÅn th√¥ng"],
                "Kh√≥a 17": 372000,
                "Kh√≥a 18-19": 369200,
                "Kh√≥a 20-21": 387000
            }
        }

        self.agent = Agent(
            role="ICTU Handbook Assistant",
            goal="Truy xu·∫•t v√† di·ªÖn gi·∫£i th√¥ng tin t·ª´ s·ªï tay ICTU ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa sinh vi√™n",
            backstory="T√¥i l√† tr·ª£ l√Ω ·∫£o h·ªó tr·ª£ sinh vi√™n ICTU, truy xu·∫•t th√¥ng tin t·ª´ s·ªï tay sinh vi√™n v√† cung c·∫•p c√¢u tr·∫£ l·ªùi ch√≠nh x√°c, ng·∫Øn g·ªçn.",
            verbose=True,
            llm=self.llm
        )

    def search_data(self, query, top_k=50):
        try:
            query_embedding = self.embedding_handler.generate_embeddings([query])[0]
            search_results = self.vector_store.search(query_embedding, top_k=top_k)
            
            if not search_results:
                return None, "üôÅ Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong s·ªï tay ICTU."

            # ƒê·∫øm s·ªë l∆∞·ª£ng c√¢u h·ªèi v√† reset max_priority n·∫øu c·∫ßn
            self.query_count += 1
            if self.query_count > 10:  # Reset sau 10 c√¢u h·ªèi ƒë·ªÉ tr√°nh ƒë·ªô ∆∞u ti√™n tƒÉng qu√° cao
                self.max_priority = 0
                self.query_count = 0

            query_lower = query.lower()
            relevant_keywords = []
            for topic, keywords in self.keywords.items():
                if any(keyword in query_lower for keyword in keywords):
                    relevant_keywords.extend(keywords)
                    break

            # Th√™m t·ª´ kh√≥a v√† tƒÉng ƒë·ªô ∆∞u ti√™n cho c√°c ch·ªß ƒë·ªÅ
            if "khoa" in query_lower or "ng√†nh h·ªçc" in query_lower or "li·ªát k√™" in query_lower:
                relevant_keywords.extend([
                    "khoa", "ng√†nh h·ªçc", "c∆° c·∫•u t·ªï ch·ª©c", "khoa h·ªçc c∆° b·∫£n", "c√¥ng ngh·ªá th√¥ng tin",
                    "c√¥ng ngh·ªá ƒëi·ªán t·ª≠ v√† truy·ªÅn th√¥ng", "h·ªá th·ªëng th√¥ng tin kinh t·∫ø", "c√¥ng ngh·ªá t·ª± ƒë·ªông h√≥a",
                    "truy·ªÅn th√¥ng ƒëa ph∆∞∆°ng ti·ªán", "th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠"
                ])
                self.priority_weights["khoa"] = max(self.priority_weights["khoa"] + 2, self.max_priority)
                self.priority_weights["ng√†nh h·ªçc"] = max(self.priority_weights["ng√†nh h·ªçc"] + 2, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["khoa"], self.priority_weights["ng√†nh h·ªçc"])

            # Th√™m t·ª´ kh√≥a cho c√°c ng√†nh h·ªçc t·ª´ b·∫£ng ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o
            majors = []
            for block in self.training_program.values():
                majors.extend(block["majors"])
            for major in majors:
                if major.lower() in query_lower:
                    relevant_keywords.append(major)

            # Th√™m t·ª´ kh√≥a cho h·ªçc ph√≠ v√† kh√≥a h·ªçc
            if "h·ªçc ph√≠" in query_lower or "m·ªói t√≠n ch·ªâ" in query_lower or "bao nhi√™u ti·ªÅn" in query_lower:
                relevant_keywords.extend(["h·ªçc ph√≠", "ƒë·ªìng/t√≠n ch·ªâ", "m·ªói t√≠n ch·ªâ", "kh√≥a 17", "kh√≥a 18-19", "kh√≥a 20-21"])
                self.priority_weights["h·ªçc ph√≠"] = max(self.priority_weights["h·ªçc ph√≠"] + 2, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["h·ªçc ph√≠"])
            if "kh√≥a 17" in query_lower:
                relevant_keywords.append("kh√≥a 17")
            if "kh√≥a 18" in query_lower or "kh√≥a 19" in query_lower or "kh√≥a 18-19" in query_lower:
                relevant_keywords.extend(["kh√≥a 18", "kh√≥a 19", "kh√≥a 18-19"])
            if "kh√≥a 20" in query_lower or "kh√≥a 21" in query_lower or "kh√≥a 20-21" in query_lower:
                relevant_keywords.extend(["kh√≥a 20", "kh√≥a 21", "kh√≥a 20-21"])

            # M·ªü r·ªông t·ª´ kh√≥a cho c√°c ch·ªß ƒë·ªÅ kh√°c
            if "ƒëi·ªÅu 3" in query_lower:
                relevant_keywords.extend(["ƒëi·ªÅu 3", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "k·ªπ s∆∞", "tr√¨nh ƒë·ªô b·∫≠c 7", "c·ª≠ nh√¢n"])
            if "c·ª≠ nh√¢n" in query_lower:
                relevant_keywords.extend(["c·ª≠ nh√¢n", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "ƒë·∫°i h·ªçc"])
            if "k·ªπ s∆∞" in query_lower:
                relevant_keywords.extend(["k·ªπ s∆∞", "tr√¨nh ƒë·ªô b·∫≠c 7", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "t√≠n ch·ªâ", "kh·ªëi l∆∞·ª£ng h·ªçc t·∫≠p"])
            if "x·∫øp lo·∫°i h·ªçc l·ª±c" in query_lower:
                relevant_keywords.extend(["x·∫øp lo·∫°i h·ªçc l·ª±c", "xu·∫•t s·∫Øc", "gi·ªèi", "kh√°", "trung b√¨nh", "y·∫øu", "k√©m", "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y"])
                self.priority_weights["x·∫øp lo·∫°i h·ªçc l·ª±c"] = max(self.priority_weights["x·∫øp lo·∫°i h·ªçc l·ª±c"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["x·∫øp lo·∫°i h·ªçc l·ª±c"])
            if "x·∫øp h·∫°ng h·ªçc l·ª±c" in query_lower:
                relevant_keywords.extend(["x·∫øp h·∫°ng h·ªçc l·ª±c", "h·∫°ng b√¨nh th∆∞·ªùng", "h·∫°ng y·∫øu", "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y"])
                self.priority_weights["x·∫øp h·∫°ng h·ªçc l·ª±c"] = max(self.priority_weights["x·∫øp h·∫°ng h·ªçc l·ª±c"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["x·∫øp h·∫°ng h·ªçc l·ª±c"])
            if "ƒëƒÉng nh·∫≠p" in query_lower:
                relevant_keywords.extend(["ƒëƒÉng nh·∫≠p", "m√£ sinh vi√™n", "m·∫≠t kh·∫©u", "ng√†y th√°ng nƒÉm sinh", "vi·∫øt hoa", "h·ªá th·ªëng"])
                self.priority_weights["ƒëƒÉng nh·∫≠p"] = max(self.priority_weights["ƒëƒÉng nh·∫≠p"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["ƒëƒÉng nh·∫≠p"])
            if "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower:
                relevant_keywords.extend(["ƒë·ªïi m·∫≠t kh·∫©u", "thay ƒë·ªïi m·∫≠t kh·∫©u", "c·∫≠p nh·∫≠t m·∫≠t kh·∫©u", "qu·∫£n l√Ω t√†i kho·∫£n", "ph√≤ng ƒë√†o t·∫°o", "h·ªá th·ªëng"])
                self.priority_weights["ƒë·ªïi m·∫≠t kh·∫©u"] = max(self.priority_weights["ƒë·ªïi m·∫≠t kh·∫©u"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["ƒë·ªïi m·∫≠t kh·∫©u"])
            if "ƒëƒÉng k√Ω h·ªçc" in query_lower:
                relevant_keywords.extend(["ƒëƒÉng k√Ω h·ªçc", "h·ªçc ph·∫ßn", "h·ªá th·ªëng", "ƒëƒÉng k√Ω t√≠n ch·ªâ"])
                self.priority_weights["ƒëƒÉng k√Ω h·ªçc"] = max(self.priority_weights["ƒëƒÉng k√Ω h·ªçc"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["ƒëƒÉng k√Ω h·ªçc"])
            if "thanh to√°n h·ªçc ph√≠" in query_lower or "n·ªôp ti·ªÅn tr∆∞·ªõc" in query_lower:
                relevant_keywords.extend(["thanh to√°n h·ªçc ph√≠", "online", "ƒëƒÉng k√Ω h·ªçc k·ª≥ t·ªõi", "n·ªôp ti·ªÅn tr∆∞·ªõc", "ch·ª©c nƒÉng thanh to√°n", "h·ªá th·ªëng"])
                self.priority_weights["thanh to√°n h·ªçc ph√≠"] = max(self.priority_weights["thanh to√°n h·ªçc ph√≠"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["thanh to√°n h·ªçc ph√≠"])
            if "ho·∫°t ƒë·ªông ngo·∫°i kh√≥a" in query_lower:
                relevant_keywords.extend(["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a", "ƒëi·ªÉm ngo·∫°i kh√≥a", "tham gia ho·∫°t ƒë·ªông", "ƒë√°nh gi√° ho·∫°t ƒë·ªông"])
                self.priority_weights["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a"] = max(self.priority_weights["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["ho·∫°t ƒë·ªông ngo·∫°i kh√≥a"])
            if "xem l·ªãch thi" in query_lower:
                relevant_keywords.extend(["xem l·ªãch thi", "h·ªçc k·ª≥", "ƒë·ª£t h·ªçc"])
                self.priority_weights["xem l·ªãch thi"] = max(self.priority_weights["xem l·ªãch thi"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["xem l·ªãch thi"])
            if "tra c·ª©u ƒëi·ªÉm" in query_lower:
                relevant_keywords.extend(["tra c·ª©u ƒëi·ªÉm", "h·ªçc k·ª≥"])
                self.priority_weights["tra c·ª©u ƒëi·ªÉm"] = max(self.priority_weights["tra c·ª©u ƒëi·ªÉm"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["tra c·ª©u ƒëi·ªÉm"])
            if "h·ªßy h·ªçc ph·∫ßn" in query_lower:
                relevant_keywords.extend(["h·ªßy h·ªçc ph·∫ßn", "ƒëƒÉng k√Ω nh·∫ßm"])
                self.priority_weights["h·ªßy h·ªçc ph·∫ßn"] = max(self.priority_weights["h·ªßy h·ªçc ph·∫ßn"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["h·ªßy h·ªçc ph·∫ßn"])
            if "g·ª≠i tin nh·∫Øn" in query_lower:
                relevant_keywords.extend(["g·ª≠i tin nh·∫Øn", "ng∆∞·ªùi qu·∫£n tr·ªã"])
                self.priority_weights["g·ª≠i tin nh·∫Øn"] = max(self.priority_weights["g·ª≠i tin nh·∫Øn"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["g·ª≠i tin nh·∫Øn"])
            if "t·ªïng s·ªë t√≠n ch·ªâ" in query_lower or "kh·ªëi l∆∞·ª£ng h·ªçc t·∫≠p t·ªëi thi·ªÉu" in query_lower:
                relevant_keywords.extend(["t·ªïng s·ªë t√≠n ch·ªâ", "kh·ªëi l∆∞·ª£ng h·ªçc t·∫≠p t·ªëi thi·ªÉu", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o", "k·ªπ s∆∞", "tr√¨nh ƒë·ªô b·∫≠c 7", "c·ª≠ nh√¢n", "ƒëi·ªÅu 3"])
                self.priority_weights["t·ªïng s·ªë t√≠n ch·ªâ"] = max(self.priority_weights["t·ªïng s·ªë t√≠n ch·ªâ"] + 1, self.max_priority)
                self.max_priority = max(self.max_priority, self.priority_weights["t·ªïng s·ªë t√≠n ch·ªâ"])

            filtered_results = []
            for result in search_results:
                result_text = result.payload["text"].lower()
                keyword_score = sum(1 for keyword in relevant_keywords if keyword in result_text)
                
                # √Åp d·ª•ng ƒë·ªô ∆∞u ti√™n theo ch·ªß ƒë·ªÅ
                if "khoa" in query_lower and "khoa" in result_text:
                    keyword_score += self.priority_weights["khoa"]
                if "ng√†nh h·ªçc" in query_lower and any(major.lower() in result_text for major in majors):
                    keyword_score += self.priority_weights["ng√†nh h·ªçc"]
                if "li·ªát k√™" in query_lower and "khoa" in result_text:
                    keyword_score += self.priority_weights["khoa"]
                if "c∆° c·∫•u t·ªï ch·ª©c" in result_text:
                    keyword_score += 10  # ∆Øu ti√™n cao cho c√°c ƒëo·∫°n vƒÉn ch·ª©a danh s√°ch khoa
                if "h·ªçc ph√≠" in query_lower and "ƒë·ªìng/t√≠n ch·ªâ" in result_text:
                    keyword_score += self.priority_weights["h·ªçc ph√≠"]
                if "x·∫øp lo·∫°i h·ªçc l·ª±c" in query_lower and "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y" in result_text:
                    keyword_score += self.priority_weights["x·∫øp lo·∫°i h·ªçc l·ª±c"]
                if "x·∫øp h·∫°ng h·ªçc l·ª±c" in query_lower and "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y" in result_text:
                    keyword_score += self.priority_weights["x·∫øp h·∫°ng h·ªçc l·ª±c"]
                if "ƒëƒÉng nh·∫≠p" in query_lower and "h·ªá th·ªëng" in result_text:
                    keyword_score += self.priority_weights["ƒëƒÉng nh·∫≠p"]
                if "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower and "qu·∫£n l√Ω t√†i kho·∫£n" in result_text:
                    keyword_score += self.priority_weights["ƒë·ªïi m·∫≠t kh·∫©u"]
                if "ƒëƒÉng k√Ω h·ªçc" in query_lower and "h·ªá th·ªëng" in result_text:
                    keyword_score += self.priority_weights["ƒëƒÉng k√Ω h·ªçc"]
                if "thanh to√°n h·ªçc ph√≠" in query_lower and "h·ªá th·ªëng" in result_text:
                    keyword_score += self.priority_weights["thanh to√°n h·ªçc ph√≠"]
                if "t·ªïng s·ªë t√≠n ch·ªâ" in result_text or "kh·ªëi l∆∞·ª£ng h·ªçc t·∫≠p t·ªëi thi·ªÉu" in result_text:
                    keyword_score += self.priority_weights["t·ªïng s·ªë t√≠n ch·ªâ"]
                if "tr√¨nh ƒë·ªô b·∫≠c 7 k·ªπ s∆∞" in result_text and "t√≠n ch·ªâ" in result_text:
                    keyword_score += 3

                combined_score = result.score + (keyword_score * 0.7)
                if combined_score >= 0.1:  # Gi·∫£m ng∆∞·ª°ng t·ª´ 0.3 xu·ªëng 0.1
                    filtered_results.append({
                        "id": result.id,
                        "text": result.payload["text"],
                        "metadata": result.payload["metadata"],
                        "score": combined_score
                    })

            filtered_results = sorted(filtered_results, key=lambda x: x["score"], reverse=True)
            if not filtered_results:
                return None, "üôÅ Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan trong s·ªï tay ICTU (score qu√° th·∫•p)."
            return filtered_results[:top_k], None
        except Exception as e:
            return None, f"‚ùå L·ªói khi t√¨m ki·∫øm d·ªØ li·ªáu: {str(e)}"

    def create_task(self, query, search_results):
        context = "\n\n".join([result["text"] for result in search_results])
        context = context.replace("T·∫£i v·ªÅ:", "").replace(".xlsm", "")
        for page in ["133", "134", "135", "136", "137", "138", "139", "140", "141", "142"]:
            context = context.replace(page, "")
        
        query_lower = query.lower()
        relevant_keywords = []
        for topic, keywords in self.keywords.items():
            if any(keyword in query_lower for keyword in keywords):
                relevant_keywords.extend(keywords)
                break

        # Th√™m t·ª´ kh√≥a cho c√°c khoa v√† ng√†nh h·ªçc
        if "khoa" in query_lower or "ng√†nh h·ªçc" in query_lower or "li·ªát k√™" in query_lower:
            relevant_keywords.extend([
                "khoa", "ng√†nh h·ªçc", "c∆° c·∫•u t·ªï ch·ª©c", "khoa h·ªçc c∆° b·∫£n", "c√¥ng ngh·ªá th√¥ng tin",
                "c√¥ng ngh·ªá ƒëi·ªán t·ª≠ v√† truy·ªÅn th√¥ng", "h·ªá th·ªëng th√¥ng tin kinh t·∫ø", "c√¥ng ngh·ªá t·ª± ƒë·ªông h√≥a",
                "truy·ªÅn th√¥ng ƒëa ph∆∞∆°ng ti·ªán", "th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠"
            ])

        # Th√™m t·ª´ kh√≥a cho c√°c ng√†nh h·ªçc t·ª´ b·∫£ng ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o
        majors = []
        for block in self.training_program.values():
            majors.extend(block["majors"])
        for major in majors:
            if major.lower() in query_lower:
                relevant_keywords.append(major)

        # Th√™m t·ª´ kh√≥a cho h·ªçc ph√≠ v√† kh√≥a h·ªçc
        if "h·ªçc ph√≠" in query_lower or "m·ªói t√≠n ch·ªâ" in query_lower or "bao nhi√™u ti·ªÅn" in query_lower:
            relevant_keywords.extend(["h·ªçc ph√≠", "ƒë·ªìng/t√≠n ch·ªâ", "m·ªói t√≠n ch·ªâ", "kh√≥a 17", "kh√≥a 18-19", "kh√≥a 20-21"])
        if "kh√≥a 17" in query_lower:
            relevant_keywords.append("kh√≥a 17")
        if "kh√≥a 18" in query_lower or "kh√≥a 19" in query_lower or "kh√≥a 18-19" in query_lower:
            relevant_keywords.extend(["kh√≥a 18", "kh√≥a 19", "kh√≥a 18-19"])
        if "kh√≥a 20" in query_lower or "kh√≥a 21" in query_lower or "kh√≥a 20-21" in query_lower:
            relevant_keywords.extend(["kh√≥a 20", "kh√≥a 21", "kh√≥a 20-21"])

        # H√†m ki·ªÉm tra n·ªôi dung li√™n quan
        def has_relevant_content(keywords, context_lower, search_results):
            for keyword in keywords:
                if keyword in context_lower:
                    return True
            for result in search_results:
                result_text = result["text"].lower()
                if "khoa" in query_lower and "khoa" in result_text:
                    return True
                if "ng√†nh h·ªçc" in query_lower and any(major.lower() in result_text for major in majors):
                    return True
                if "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y" in result_text and ("x·∫øp lo·∫°i h·ªçc l·ª±c" in query_lower or "x·∫øp h·∫°ng h·ªçc l·ª±c" in query_lower):
                    return True
                if "h·ªá th·ªëng" in result_text and ("ƒëƒÉng nh·∫≠p" in query_lower or "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower or "ƒëƒÉng k√Ω h·ªçc" in query_lower or "thanh to√°n h·ªçc ph√≠" in query_lower):
                    return True
                if "qu·∫£n l√Ω t√†i kho·∫£n" in result_text and "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower:
                    return True
                if any(major.lower() in result_text for major in majors) and "ƒë·ªìng/t√≠n ch·ªâ" in result_text:
                    return True
            return False

        # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ h·ªçc ph√≠ c·ªßa m·ªôt ng√†nh c·ª• th·ªÉ
        if any(major.lower() in query_lower for major in majors) and ("h·ªçc ph√≠" in query_lower or "m·ªói t√≠n ch·ªâ" in query_lower or "bao nhi√™u ti·ªÅn" in query_lower):
            for major in majors:
                if major.lower() in query_lower:
                    selected_major = major
                    break
            for block_name, block in self.training_program.items():
                if selected_major in block["majors"]:
                    if "kh√≥a 17" in query_lower:
                        tuition_fee = block["Kh√≥a 17"]
                        return Task(
                            description=f"Tr·∫£ l·ªùi h·ªçc ph√≠ c·ªßa ng√†nh {selected_major} cho Kh√≥a 17.",
                            agent=self.agent,
                            expected_output=f"Ng√†nh {selected_major} Kh√≥a 17: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                        )
                    elif "kh√≥a 18-19" in query_lower or "kh√≥a 18" in query_lower or "kh√≥a 19" in query_lower:
                        tuition_fee = block["Kh√≥a 18-19"]
                        return Task(
                            description=f"Tr·∫£ l·ªùi h·ªçc ph√≠ c·ªßa ng√†nh {selected_major} cho Kh√≥a 18-19.",
                            agent=self.agent,
                            expected_output=f"Ng√†nh {selected_major} Kh√≥a 18-19: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                        )
                    elif "kh√≥a 20-21" in query_lower or "kh√≥a 20" in query_lower or "kh√≥a 21" in query_lower:
                        tuition_fee = block["Kh√≥a 20-21"]
                        return Task(
                            description=f"Tr·∫£ l·ªùi h·ªçc ph√≠ c·ªßa ng√†nh {selected_major} cho Kh√≥a 20-21.",
                            agent=self.agent,
                            expected_output=f"Ng√†nh {selected_major} Kh√≥a 20-21: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ."
                        )
                    else:
                        # ƒê·ªëi v·ªõi c√°c kh√≥a kh√¥ng c√≥ trong b·∫£ng, l·∫•y h·ªçc ph√≠ c·ªßa Kh√≥a 18-19
                        tuition_fee = block["Kh√≥a 18-19"]
                        return Task(
                            description=f"Tr·∫£ l·ªùi h·ªçc ph√≠ c·ªßa ng√†nh {selected_major} cho kh√≥a kh√¥ng x√°c ƒë·ªãnh (m·∫∑c ƒë·ªãnh Kh√≥a 18-19).",
                            agent=self.agent,
                            expected_output=f"Ng√†nh {selected_major}: {tuition_fee:,} ƒë·ªìng/t√≠n ch·ªâ (theo ƒë∆°n gi√° Kh√≥a 18-19 cho c√°c kh√≥a kh√¥ng x√°c ƒë·ªãnh)."
                        )

        # X·ª≠ l√Ω c√¢u h·ªèi li·ªát k√™ c√°c ng√†nh h·ªçc
        if "li·ªát k√™ c√°c ng√†nh h·ªçc" in query_lower or "danh s√°ch ng√†nh h·ªçc" in query_lower:
            all_majors = []
            for block_name, block in self.training_program.items():
                all_majors.extend(block["majors"])
            majors_list = "\n".join([f"- {major}" for major in all_majors])
            return Task(
                description="Li·ªát k√™ c√°c ng√†nh h·ªçc t·ª´ ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ƒë·∫°i tr√†.",
                agent=self.agent,
                expected_output=f"Danh s√°ch c√°c ng√†nh h·ªçc t·∫°i ICTU:\n{majors_list}"
            )

        # Ki·ªÉm tra c√¢u h·ªèi v·ªÅ khoa v√† ng√†nh h·ªçc
        if "khoa" in query_lower or "ng√†nh h·ªçc" in query_lower or "li·ªát k√™" in query_lower:
            if not has_relevant_content(["khoa", "ng√†nh h·ªçc", "c∆° c·∫•u t·ªï ch·ª©c"], context.lower(), search_results):
                return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")

        # N·ªõi l·ªèng ki·ªÉm tra cho c√°c ch·ªß ƒë·ªÅ kh√°c
        if "ƒëi·ªÅu 3" in query_lower and not has_relevant_content(["ƒëi·ªÅu 3", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o"], context.lower(), search_results):
            return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if "c·ª≠ nh√¢n" in query_lower and not has_relevant_content(["c·ª≠ nh√¢n", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o"], context.lower(), search_results):
            return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if "k·ªπ s∆∞" in query_lower and not has_relevant_content(["k·ªπ s∆∞", "tr√¨nh ƒë·ªô b·∫≠c 7", "ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o"], context.lower(), search_results):
            return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if "x·∫øp lo·∫°i h·ªçc l·ª±c" in query_lower and not has_relevant_content(["x·∫øp lo·∫°i h·ªçc l·ª±c", "xu·∫•t s·∫Øc", "gi·ªèi", "kh√°", "trung b√¨nh", "y·∫øu", "k√©m", "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y"], context.lower(), search_results):
            return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if "x·∫øp h·∫°ng h·ªçc l·ª±c" in query_lower and not has_relevant_content(["x·∫øp h·∫°ng h·ªçc l·ª±c", "h·∫°ng b√¨nh th∆∞·ªùng", "h·∫°ng y·∫øu", "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y"], context.lower(), search_results):
            return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if "ƒëƒÉng nh·∫≠p" in query_lower and not has_relevant_content(["ƒëƒÉng nh·∫≠p", "m√£ sinh vi√™n", "m·∫≠t kh·∫©u", "h·ªá th·ªëng"], context.lower(), search_results):
            return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if "ƒë·ªïi m·∫≠t kh·∫©u" in query_lower and not has_relevant_content(["ƒë·ªïi m·∫≠t kh·∫©u", "thay ƒë·ªïi m·∫≠t kh·∫©u", "c·∫≠p nh·∫≠t m·∫≠t kh·∫©u", "qu·∫£n l√Ω t√†i kho·∫£n", "ph√≤ng ƒë√†o t·∫°o", "h·ªá th·ªëng"], context.lower(), search_results):
            return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if "ƒëƒÉng k√Ω h·ªçc" in query_lower and not has_relevant_content(["ƒëƒÉng k√Ω h·ªçc", "h·ªçc ph·∫ßn", "h·ªá th·ªëng", "ƒëƒÉng k√Ω t√≠n ch·ªâ"], context.lower(), search_results):
            return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if "thanh to√°n h·ªçc ph√≠" in query_lower or "n·ªôp ti·ªÅn tr∆∞·ªõc" in query_lower:
            if not has_relevant_content(["thanh to√°n h·ªçc ph√≠", "online", "ƒëƒÉng k√Ω h·ªçc k·ª≥ t·ªõi", "n·ªôp ti·ªÅn tr∆∞·ªõc", "ch·ª©c nƒÉng thanh to√°n", "h·ªá th·ªëng"], context.lower(), search_results):
                return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")
        if any(major.lower() in query_lower for major in majors) and ("h·ªçc ph√≠" in query_lower or "m·ªói t√≠n ch·ªâ" in query_lower or "bao nhi√™u ti·ªÅn" in query_lower):
            if not has_relevant_content(majors + ["h·ªçc ph√≠", "ƒë·ªìng/t√≠n ch·ªâ", "m·ªói t√≠n ch·ªâ"], context.lower(), search_results):
                return Task(description="Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.", agent=self.agent, expected_output="**Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU.**")

        task = Task(
            description=f"""
                Tr√≠ch xu·∫•t th√¥ng tin ch√≠nh x√°c ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi: '{query}' t·ª´ n·ªôi dung sau:
                {context}

                ‚ö†Ô∏è Y√™u c·∫ßu:
                - Ch·ªâ tr√≠ch xu·∫•t ƒë√∫ng n·ªôi dung li√™n quan nh·∫•t t·ª´ ƒëo·∫°n vƒÉn tr√™n.
                - ∆Øu ti√™n c√°c ƒëo·∫°n vƒÉn ch·ª©a c√°c t·ª´ kh√≥a: {', '.join(relevant_keywords)}.
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "li·ªát k√™ c√°c khoa" ho·∫∑c "c√°c khoa t·∫°i ICTU", tr√≠ch xu·∫•t danh s√°ch c√°c khoa t·ª´ c√°c ƒëo·∫°n vƒÉn ch·ª©a t·ª´ kh√≥a "khoa" v√† li·ªát k√™ ƒë·∫ßy ƒë·ªß.
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ng√†nh h·ªçc" ho·∫∑c "li·ªát k√™ c√°c ng√†nh h·ªçc", tr√≠ch xu·∫•t th√¥ng tin v·ªÅ c√°c ng√†nh h·ªçc n·∫øu c√≥ (v√≠ d·ª•: "Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠" t·ª´ c√°c ƒëo·∫°n vƒÉn li√™n quan). N·∫øu kh√¥ng c√≥ th√¥ng tin chi ti·∫øt v·ªÅ ng√†nh h·ªçc, suy lu·∫≠n ng√†nh h·ªçc d·ª±a tr√™n t√™n khoa (v√≠ d·ª•: Khoa C√¥ng ngh·ªá Th√¥ng tin c√≥ th·ªÉ ƒë√†o t·∫°o ng√†nh C√¥ng ngh·ªá Th√¥ng tin) v√† ghi r√µ r·∫±ng ƒë√¢y l√† suy lu·∫≠n.
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "s·ªë l∆∞·ª£ng ng√†nh h·ªçc", ƒë·∫øm s·ªë l∆∞·ª£ng ng√†nh h·ªçc d·ª±a tr√™n th√¥ng tin c√≥ s·∫µn ho·∫∑c suy lu·∫≠n t·ª´ t√™n khoa, v√† ghi r√µ n·∫øu l√† suy lu·∫≠n.
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "x·∫øp lo·∫°i h·ªçc l·ª±c", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "x·∫øp lo·∫°i h·ªçc l·ª±c", "xu·∫•t s·∫Øc", "gi·ªèi", "kh√°", "trung b√¨nh", "y·∫øu", "k√©m", ho·∫∑c "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y".
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "x·∫øp h·∫°ng h·ªçc l·ª±c", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "x·∫øp h·∫°ng h·ªçc l·ª±c", "h·∫°ng b√¨nh th∆∞·ªùng", "h·∫°ng y·∫øu", ho·∫∑c "ƒëi·ªÉm trung b√¨nh t√≠ch l≈©y".
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ c·∫£ "x·∫øp lo·∫°i h·ªçc l·ª±c" v√† "x·∫øp h·∫°ng h·ªçc l·ª±c", tr√≠ch xu·∫•t c·∫£ hai n·ªôi dung v√† tr√¨nh b√†y r√µ r√†ng, ph√¢n t√°ch b·∫±ng d·∫•u xu·ªëng d√≤ng.
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ƒëƒÉng nh·∫≠p", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "ƒëƒÉng nh·∫≠p", "m√£ sinh vi√™n", "m·∫≠t kh·∫©u", "ng√†y th√°ng nƒÉm sinh", "vi·∫øt hoa", "h·ªá th·ªëng".
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ƒë·ªïi m·∫≠t kh·∫©u", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "ƒë·ªïi m·∫≠t kh·∫©u", "thay ƒë·ªïi m·∫≠t kh·∫©u", "c·∫≠p nh·∫≠t m·∫≠t kh·∫©u", "qu·∫£n l√Ω t√†i kho·∫£n", "ph√≤ng ƒë√†o t·∫°o", "h·ªá th·ªëng".
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "ƒëƒÉng k√Ω h·ªçc", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "ƒëƒÉng k√Ω h·ªçc", "h·ªçc ph·∫ßn", "h·ªá th·ªëng", "ƒëƒÉng k√Ω t√≠n ch·ªâ".
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "thanh to√°n h·ªçc ph√≠" ho·∫∑c "n·ªôp ti·ªÅn tr∆∞·ªõc", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "thanh to√°n h·ªçc ph√≠", "online", "ƒëƒÉng k√Ω h·ªçc k·ª≥ t·ªõi", "n·ªôp ti·ªÅn tr∆∞·ªõc", "ch·ª©c nƒÉng thanh to√°n", "h·ªá th·ªëng". N·∫øu c√¢u h·ªèi c√≥ c·ª•m "n·ªôp ti·ªÅn tr∆∞·ªõc", ∆∞u ti√™n c√°c ƒëo·∫°n vƒÉn ch·ª©a "n·ªôp ti·ªÅn tr∆∞·ªõc" v√† m√¥ t·∫£ quy tr√¨nh n·ªôp ti·ªÅn.
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "h·ªßy h·ªçc ph·∫ßn", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "h·ªßy h·ªçc ph·∫ßn", "ƒëƒÉng k√Ω nh·∫ßm".
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "xem l·ªãch thi", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "xem l·ªãch thi", "h·ªçc k·ª≥", "ƒë·ª£t h·ªçc".
                - N·∫øu c√¢u h·ªèi h·ªèi v·ªÅ "tra c·ª©u ƒëi·ªÉm", ch·ªâ tr√≠ch xu·∫•t c√°c ƒëo·∫°n ch·ª©a "tra c·ª©u ƒëi·ªÉm", "h·ªçc k·ª≥".
                - N·∫øu c√¢u h·ªèi kh√¥ng thu·ªôc c√°c ch·ªß ƒë·ªÅ tr√™n, tr√≠ch xu·∫•t c√°c ƒëo·∫°n vƒÉn li√™n quan nh·∫•t d·ª±a tr√™n t·ª´ kh√≥a v√† ng·ªØ nghƒ©a c·ªßa c√¢u h·ªèi.
                - KH√îNG ƒë∆∞·ª£c vi·∫øt l·∫°i, di·ªÖn gi·∫£i l·∫°i hay s√°ng t·∫°o th√™m.
                - KH√îNG c·∫ßn t√≥m t·∫Øt.
                - N·∫øu trong ƒëo·∫°n vƒÉn c√≥ c√¢u tr·∫£ l·ªùi tr·ª±c ti·∫øp, h√£y tr√≠ch nguy√™n vƒÉn.
                - N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p, tr·∫£ l·ªùi: **"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ch·ªß ƒë·ªÅ n√†y trong s·ªï tay ICTU."**

                Ch·ªâ tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
                """,
            agent=self.agent,
            expected_output="C√¢u tr·∫£ l·ªùi ch√≠nh x√°c, kh√¥ng t√≥m t·∫Øt, kh√¥ng vi·∫øt l·∫°i, ch·ªâ tr√≠ch xu·∫•t ƒë√∫ng th√¥ng tin t·ª´ ƒëo·∫°n vƒÉn."
        )
        return task

    def run(self, query, top_k=50):
        search_results, error = self.search_data(query, top_k)
        print("\nüí¨ K·∫øt qu·∫£ t√¨m ki·∫øm t·ª´ Qdrant:")
        if error:
            print(error)
            return error
        else:
            for i, result in enumerate(search_results):
                print(f"\nK·∫øt qu·∫£ {i + 1} (Score: {result['score']:.4f}):")
                print(f"ID: {result['id']}")
                print("Text (to√†n b·ªô n·ªôi dung):")
                print(result['text'])
                print(f"Metadata: {result['metadata']}")

        print("\nüìù Di·ªÖn gi·∫£i v√† tr·∫£ l·ªùi c√¢u h·ªèi b·∫±ng LLM...")
        try:
            task = self.create_task(query, search_results)
            crew = Crew(agents=[self.agent], tasks=[task], verbose=2)
            result = crew.kickoff()
            # L·∫•y ID t·ª´ k·∫øt qu·∫£ c√≥ n·ªôi dung kh·ªõp v·ªõi c√¢u tr·∫£ l·ªùi
            if search_results:
                relevant_result = None
                for res in search_results:
                    # So s√°nh ch√≠nh x√°c h∆°n b·∫±ng c√°ch ki·ªÉm tra xem result c√≥ ph·∫£i l√† m·ªôt ph·∫ßn c·ªßa res['text']
                    if result.strip() in res['text'].strip():
                        relevant_result = res
                        break
                if not relevant_result:
                    # N·∫øu kh√¥ng t√¨m th·∫•y kh·ªõp ch√≠nh x√°c, th·ª≠ t√¨m ki·∫øm d·ª±a tr√™n t·ª´ kh√≥a ch√≠nh trong result
                    for res in search_results:
                        if "ƒêo√†n thanh ni√™n" in res['text'] and "Nh√† ƒëi·ªÅu h√†nh C1" in res['text']:
                            relevant_result = res
                            break
                if not relevant_result:
                    relevant_result = search_results[0]  # M·∫∑c ƒë·ªãnh l·∫•y k·∫øt qu·∫£ c√≥ score cao nh·∫•t n·∫øu kh√¥ng t√¨m th·∫•y
                result_with_id = f"{result} (ID: {relevant_result['metadata']['id']})"
            else:
                result_with_id = result
            return result_with_id
        except Exception as e:
            error_msg = f"‚ùå L·ªói khi di·ªÖn gi·∫£i d·ªØ li·ªáu: {str(e)}"
            print(error_msg)
            return error_msg

if __name__ == "__main__":
    print("üöÄ Kh·ªüi ƒë·ªông ChatBotAgent...")
    try:
        bot = ChatBotAgent()
        print("üëã Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω ·∫£o h·ªó tr·ª£ sinh vi√™n ICTU.")
        print("H√£y nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (nh·∫≠p 'exit' ƒë·ªÉ tho√°t):")

        while True:
            # Nh·∫≠n c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng qua terminal
            query = input("\nüìù C√¢u h·ªèi c·ªßa b·∫°n: ").strip()

            # Ki·ªÉm tra ƒëi·ªÅu ki·ªán tho√°t
            if query.lower() == "exit":
                print("\nüëã T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n.")
                break

            # Ki·ªÉm tra n·∫øu c√¢u h·ªèi r·ªóng
            if not query:
                print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u h·ªèi!")
                continue

            # X·ª≠ l√Ω c√¢u h·ªèi v√† in ph·∫£n h·ªìi
            print(f"\nüìù ƒêang x·ª≠ l√Ω c√¢u h·ªèi: {query}")
            response = bot.run(query, top_k=18)
            print("\nüí¨ Ph·∫£n h·ªìi t·ª´ tr·ª£ l√Ω:")
            print(response)
            print("\n" + "="*50)

    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông ho·∫∑c ch·∫°y agent: {e}")
    print("üéâ Ho√†n t·∫•t!")